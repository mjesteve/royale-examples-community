<?xml version="1.0" encoding="utf-8"?>
<j:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:j="library://ns.apache.org/royale/jewel"
        xmlns:js="library://ns.apache.org/royale/basic"
        xmlns:html="library://ns.apache.org/royale/html"
	    xmlns:views="org.apache.royale.community.views.*"
        initComplete="initCompletetHandler()">
    
    <fx:Script>
        <![CDATA[
            

		public function colorDec2Hex(ccolor:int, fromVB:Boolean=false):String{

			var r:uint, g:uint, b:uint;
			if(fromVB)
			{
				//VB 6 usa la notación BBGGRR
				r = ccolor & 255
				g = Math.floor(ccolor/256) & 255
				b = Math.floor(ccolor/65536) & 255
			}else
			{
				//Web-HTML usa la notación RRGGBB
				r = Math.floor(ccolor/65536) & 255;
				g = Math.floor(ccolor/256) & 255;
				b = ccolor & 255;
			}

			return colorRGB2Hex(r,g,b);
		}

		public  function colorRGB2Hex(red:int, green:int, blue:int):String
		{
            printRGB(red,green,blue);
            var intVal:int = red << 16 | green << 8 | blue;
            var hexVal:String = intVal.toString(16);
            while(hexVal.length < 6) hexVal = "0"+ hexVal;
            return hexVal;
		}

		public  function colorHex2RGB(value:String):Object 
        {	
            value = hexFormatNormalize(value);
            
            var hexValue:uint = parseInt(value, 16);
            var rgb:Object = new Object();
            rgb.r = (hexValue >> 16) & 0xFF
            rgb.g = (hexValue >> 8) & 0xFF
            rgb.b = hexValue & 0xFF			
            return rgb;
		}

        public function hexFormatNormalize(value:String):String
        {   
            if (value.indexOf("#") != -1) {
                value = "0x"+ value.split("#").join("");
            } else {
                value = "0x"+ value;
            }
            return value;
        }
            
		public  function colorHex2Dec(value:String, toVB:Boolean=false):int
        {
            var ccolor:String = value;
            var decimal:int;
            var rgb:Object = colorHex2RGB(ccolor);
            if(toVB)
            {
                //Invert red - blue
                decimal = ((rgb.b * 65536) + (rgb.g * 256) + (rgb.r));
            }else
            {
                //Op1 - direct parseInt
                //ccolor = hexFormatNormalize(ccolor);
                //decimal = parseInt(ccolor,16);
                //Op2 - Calculation det.
                decimal = ((rgb.r * 65536) + (rgb.g * 256) + (rgb.b));
            }
                       
            return decimal;
		}

		public  function colorRGBA2Hex(r:int, g:int, b:int, a:uint=255) : uint
		{
			var redChannel:int = r << 16;
			var greenChannel:int = g << 8;
			var blueChannel:int = b;

			return (a << 24) | redChannel | greenChannel | blueChannel;
		}
  
		public function pad(s:String, minChars:int=8, fillHead:Boolean=true, pattern:String="0"):String {
			if(fillHead)
				while (s.length < minChars) s = pattern + s;
			else
				while (s.length < minChars) s = s + pattern;
			return s;
		}
		
		public function hex2css(color:int):String
        {
            return "#" + color.toString(16);
        }
		
		public function css2hex(colorcss:String, valueNoColor:int=0xffffff):String
        {
			var res:String = colorcss;
			if(!colorcss)
				res = valueNoColor.toString();
			else if(colorcss.substring(0,1) == "#")
				res = colorcss.slice(1);
			
			res = pad(res,6);
            return res;
        }

        private function printRGB(r:uint,g:uint,b:uint):void
        {            
            txtR.text = r.toString();
			txtG.text = g.toString();
            txtB.text = b.toString();
        }

        [Bindable]
        private var myColorFromDec:String = "#ffffff";
        [Bindable]
        private var myColor:String = "#ffffff";

            private function initCompletetHandler():void
            {
                txtDecVB.text = "9685503";
            }

        private function onclickDec2Hex(fromVB:Boolean):void
        {
            var myint:int;
            if(fromVB)
                myint = int(txtDecVB.text);
            else
                myint = int(txtDec.text);
            //myColorFromDec = hex2css(colorDec2Hex(myint,fromVB));
            myColorFromDec = "#" + colorDec2Hex(myint,fromVB);
            txtHex.text = css2hex(colpictodec.value);
            myColor = colpictodec.value;
            
        }

        private function onclickHex2Dec():void
        {
            var myhex:String = colpictohex.value;
            //myhex = myhex.replace("#","0x");
            //myhex = css2hex(myhex).toUpperCase();
            txtHex.text = myhex;
            var myint:int = colorHex2Dec(myhex);
            txtDec.text = myint.toString();
            myint = colorHex2Dec(myhex,true);
            txtDecVB.text = myint.toString();

            /*var myint:int = parseInt(myhex,16);
            trace(myint);
            var mydec:String = myint.toString(10);
            trace(mydec);
            trace(myint.toString(16).toUpperCase());

            var myint2:uint = uint(myhex);
            txtDec.text = myint.toString();

            var decimal:int =  parseInt("FFFFFF",16); // output : 16777215

            var hex:String = "0xFFFFFF";
            var hexint:int = int(hex); // output : 16777215
            var hexint2:String = int(hex).toString(10); //Decimal conversion
            
            var decimalStr:String = hexint.toString(16).toUpperCase(); // output : FFFFFF */
        }

        ]]>
    </fx:Script>

    <j:beads>
        <js:ContainerDataBinding/>
	</j:beads>

    <j:Card itemsExpand="false" percentHeight="100" percentWidth="100">
        <j:CardHeader>
            <j:BarSection width="100%" gap="10">
                <html:H3 text="Test Color Hex - Dec" className="primary-dark block-with-text "/>
            </j:BarSection>
        </j:CardHeader>
        <j:CardPrimaryContent height="100%" >

            <j:VGroup gap="10" percentWidth="100">
                <j:CheckBox localId="chVB" text="From VB" selected="true"/>
                <j:HGroup gap="5">
                    <j:Label text="Color - Dec VB: " /> <j:TextInput localId="txtDecVB" />
                    <j:Label text="Color - Dec: " /> <j:TextInput localId="txtDec" />
                </j:HGroup>
                <j:HGroup gap="5">
                    <j:Button localId="btnDec" text="fromDecToHex" click="onclickDec2Hex(chVB.selected)"/>
                    <html:Input localId="colpictodec" type="color" value="{myColorFromDec}"/>
                    <j:TextInput localId="txtR" width="75"/>
                    <j:TextInput localId="txtG" width="75"/>
                    <j:TextInput localId="txtB" width="75"/>
                </j:HGroup>

                <j:HGroup gap="5">
                    <j:Label text="Color - Hex: " />
                    <j:TextInput localId="txtHex" />
                    <j:Button localId="btnHex" click="onclickHex2Dec()"/>
                    <html:Input localId="colpictohex" type="color" value="{myColor}"/>
                </j:HGroup>
            </j:VGroup>

        </j:CardPrimaryContent>

    </j:Card>
</j:HGroup>
