<?xml version="1.0" encoding="utf-8"?>
<!--

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->
<j:DataGridItemRenderer
    xmlns:fx="http://ns.adobe.com/mxml/2009" 
    xmlns:j="library://ns.apache.org/royale/jewel" 
    xmlns:js="library://ns.apache.org/royale/basic">

    <fx:Script>
        <![CDATA[
            import org.apache.royale.html.util.getLabelFromData;
            import mx.net.FileReference;
            /**
             *  commit changes to the data and exit 'editing' state
             */
            public function updateLabelAndExit(event:Event):void {
                commitLabelChanges();
            }

            /**
             *  Change renderer state to edit mode by clicking in the label
             */
            public function goToEditMode(event:Event):void
            {
                currentState = "editing";
                editfield.text = static.text;
                editfield.setFocus();

                COMPILE::JS
                {
                document.addEventListener('click', commitLabelChanges, true);
                }
            }

            /**
             *  remove document listener to stop listening click events. If user made changes to label, commit 
             *  changes to the todo item and exit 'editing' state.
             */
            public function commitLabelChanges():void {
                COMPILE::JS
                {
                document.removeEventListener('click', commitLabelChanges, true);
                }
                
                if(getLabelFromData(this, data) != editfield.text)
                {
                    static.text = editfield.text; // this should be done really in an event like below in a more generic solution
                    dispatchEvent(new Event("somethingChanged", data, editfield.text));
                }
                currentState = 'normal';
            }

            // public function tih(event:Event):void
            // {
            //     editfield.element.addEventListener('focus', onInputFocus);
            // }

            // protected function onInputFocus(event:Event):void{
            //     trace(event);
            // }


  //for contextMenu
    COMPILE::JS {
	private var contextMenu:HTMLElement;
	private var contextMenu2:HTMLElement;
	}
	
	COMPILE::JS
	private function copyTextToClipboard(e:MouseEvent):void
	{
		navigator["clipboard"].writeText(element.innerText);
		document.body.removeChild(contextMenu);
		document.body.removeChild(contextMenu2);
	}
	
	COMPILE::JS
	private function fn_Paste(e:MouseEvent):void
	{
		var Value = (this).element.royale_wrapper.listData.owner.element.outerText;
		var arr = Value.split('\n');
		var arrHeadNames:Array=[];
		var v2 = Object(this).org_apache_royale_html_supportClasses_UIItemRendererBase__data;
		
		var strVal:String = "";
		//for(var i:int =0; i<arr.length/2; i++)
		//{
		//if(v2.hasOwnProperty(arr[i])){
			//strVal += arr[i] + '\t'; //adding headers
			//arrHeadNames.push(arr[i]);
			//}
		//}
		strVal += arr[0] + '\t';
		strVal += arr[1] + '\t';
		strVal+='\n';
		strVal += v2["col1"] + '\t';
		strVal += v2["col2"];
		//for(var j:int =0; j<arrHeadNames.length; j++)
		//{
			//strVal += v2[arrHeadNames[j]]+ '\t';
		//}
		//System.setClipboard(strVal);
		navigator["clipboard"].writeText(strVal);
		document.body.removeChild(contextMenu);
		document.body.removeChild(contextMenu2);
	}
	
	/** 
	 * @royaleignorecoercion HTMLElement 
	 */
			
	
	COMPILE::JS
	private function copyTextMenuHandler(e:MouseEvent):void
	{
		if(document.getElementById("contextMenuIdentifier"))
		{
		var myNode =  document.getElementById("contextMenuIdentifier");
		myNode.remove();
		
		var myNode2 =  document.getElementById("contextMenuIdentifier2");
			myNode2.remove();
		
		}
		console.log("contextMenu");
		contextMenu = document.createElement("button") as HTMLElement;
		var label:Node = document.createTextNode("Copy") as Node;
		contextMenu.appendChild(label);
		contextMenu.addEventListener("click", copyTextToClipboard);
		var rect:Object = element.getBoundingClientRect();
		contextMenu.style.position = "absolute";
		contextMenu.style.left = (rect.x + rect.width - width/2) + "px";
		contextMenu.style.top = (rect.y + rect.height) + "px";
		contextMenu.id = "contextMenuIdentifier";
        contextMenu.className = "contextMenuIdentifierGeneral contextMenuIdentifierCopy";
		document.body.appendChild(contextMenu);
		contextMenu2 = document.createElement("button") as HTMLElement;
		var label2:Node = document.createTextNode("Paste") as Node;
		contextMenu2.appendChild(label2);
		contextMenu2.addEventListener("click", fn_Paste);
		contextMenu2.style.position = "absolute";
		contextMenu2.style.left = (rect.x + rect.width - width/2) + "px";
		contextMenu2.style.top = (rect.y + rect.height + 19) + "px";
		contextMenu2.id = "contextMenuIdentifier2";
        contextMenu2.className = "contextMenuIdentifierGeneral contextMenuIdentifierPaste";

		document.body.appendChild(contextMenu2);
		e.preventDefault();		
	}
	
    override public function set data(value:Object):void
    {
        super.data = value;
		COMPILE::JS 
		{
			element.addEventListener("contextmenu", copyTextMenuHandler);
		}
    }

   
    //for contextMenu
		]]>
    </fx:Script>

    <fx:Style>
		@namespace j "library://ns.apache.org/royale/jewel";
		.contextMenuIdentifierGeneral {
            width: 200px !important;
            background-color: linear-gradient(#e6e6e6, #cccccc);
            border-style: solid;
			border-color: #CCCCCC;
            border-width: 1px;
			
		}

		.contextMenuIdentifierCopy {
            
            background-image:url("assets/copy16.png");
            background-repeat: no-repeat;
            background-size: 16px 16px;
		}
        .contextMenuIdentifierPaste {
            background-image:url("assets/paste.png");
            background-repeat: no-repeat;
            background-size: 16px 16px;
		}


	</fx:Style>

    <j:beads>
        <js:SimpleStatesImpl/>
        <js:ItemRendererDataBinding/>
        <js:Paddings padding="0"/><!-- remove all default paddings -->
    </j:beads>

    <j:states>
		<js:State name="normal"/>
		<js:State name="editing"/>
	</j:states>

        <!-- visible.normal="true" visible.editing="false"  -->
    <j:Label localId="static" 
        includeIn="normal"
        width="100%" height="100%"
        text="{getLabelFromData(this, data)}"
        doubleClick="goToEditMode(event)"
        >
        <j:beads>
            <js:Paddings padding="18"/>
        </j:beads>
    </j:Label>

        <!-- visible.normal="false" visible.editing="true" -->
    <j:TextInput localId="editfield" 
        includeIn="editing"
        width="100%" height="100%"
        enter="updateLabelAndExit(event)"
        />
        <!-- beadsAdded="tih(event)" -->

</j:DataGridItemRenderer>

