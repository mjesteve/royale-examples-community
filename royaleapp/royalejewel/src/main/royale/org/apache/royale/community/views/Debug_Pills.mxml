<?xml version="1.0" encoding="utf-8"?>
<j:Grid gap="true" xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:j="library://ns.apache.org/royale/jewel"
    xmlns:js="library://ns.apache.org/royale/basic"    
    xmlns:jc="library://ns.apache.org/royale/community"
    xmlns:html="library://ns.apache.org/royale/html" 
    initComplete="initCompletetHandler()">
    
    <fx:Script>
        <![CDATA[
            import org.apache.royale.collections.ArrayList;
                    
            [Bindable]
            private var sourcePills:ArrayList;
            private function initCompletetHandler():void
            {
                var ar:Array = new Array();
                for(var index:int = 0; index < 14; index++)
                {
                    ar.push('Filter '+index.toString());
                }
                sourcePills = new ArrayList(ar);
                lstPills.addEventListener("removePill",removePillHandler);
            }

            public function removePillHandler(event:Event):void
            {
                sourcePills.removeItemAt(event.target.index);
            }

            public function emptySelected():void
            {
                cbPills.selectedItem = null;
                cbPills.selectedIndex = -1;
            }



        ]]>
    </fx:Script>

    <j:beads>
        <js:ContainerDataBinding/>
		<js:Paddings paddingTop="0" paddingLeft="45" paddingRight="45" paddingBottom="45"/>
        <j:ScrollingViewport/>
    </j:beads>

    <jc:ExampleHeader title="BadgeWithMouseClick Bead ">
        <jc:description>
            <![CDATA[The <strong>Badge</strong> class provides a small status descriptors for UI elements.<p>A <strong>Badge</strong> is an onscreen notification element consists of a small circle, typically containing a number or other characters, that appears in proximity to another object.</p><p>The <strong>BadgeWithMouseClick</strong> class is a Badge extension that dispatches the <strong>MouseClick</strong> Event.</p><p>(Included in the SDK since version 0.9.8)</p>]]>
        </jc:description>
    </jc:ExampleHeader>

    <j:GridCell wideScreenNumerator="1" wideScreenDenominator="2" desktopNumerator="1" desktopDenominator="2" tabletNumerator="1" tabletDenominator="2" phoneNumerator="1" phoneDenominator="1">

        <j:Card percentHeight="100">
            <j:CardHeader>
                <j:CardTitle text="1st Example" className="primary-normal"/>
            </j:CardHeader>

            <j:CardPrimaryContent>

                <j:VGroup gap="5" percentWidth="100">

                    <j:Label multiline="true">
                        <j:html><![CDATA[<p>List of selection criteria to filter a data set.</p><p>A <strong>Jewel List</strong> is used with a custom ItemRenderer composed of a <strong>Jewel Button</strong> with the Bead <strong>BadgeWithMouseClick</strong>.</p><p>The click on the badge bubbles, up to the List, like '<strong>removePill</strong>'.</p></p><p>The style of the List and the ItemRenderer components is defined under the CSS class '<strong>pillButtonStyle</strong>'.</p>]]></j:html>
                    </j:Label>
                    <j:List localId="lstPills" percentWidth="100" minHeight="35"                    
                            dataProvider="{sourcePills}"
                            className="pillListStyle">
                        <j:beads>
                            <j:ListPresentationModel rowHeight="35" variableRowHeight="true"/>
                            <j:TileHorizontalLayout />
                        </j:beads>
                    </j:List>
                </j:VGroup>

            </j:CardPrimaryContent>

        </j:Card>
    </j:GridCell>

    <j:GridCell wideScreenNumerator="1" wideScreenDenominator="2" desktopNumerator="1" desktopDenominator="2" tabletNumerator="1" tabletDenominator="2" phoneNumerator="1" phoneDenominator="1">

        <j:Card percentHeight="100">
            <j:CardHeader>
                <j:CardTitle text="2nd Example" className="primary-normal"/>
            </j:CardHeader>

            <j:CardPrimaryContent>

                <j:VGroup gap="5" percentWidth="100">
            
                    <j:Label multiline="true">
                        <j:html><![CDATA[<p>We add a '<strong>Reset</strong>' button to a <strong>Jewel ComboBox</strong>.</p><p>In this proposal, a ComboBox is wrapped in a Group to which we add the Bead <strong>BadgeWithMouseClick</strong> which will reset the ComboBox when clicked.</p>]]></j:html>
                    </j:Label>
            
                    <j:Group width="200" className="pillComboStyle" >
                        <j:beads>
                            <j:BadgeWithMouseClick text="â†¶" click="emptySelected()"/>
                        </j:beads>
                        <j:ComboBox localId="cbPills" percentWidth="100" dataProvider="{sourcePills}"/>
                    </j:Group>
            
                </j:VGroup>
            
            </j:CardPrimaryContent>

        </j:Card>
    </j:GridCell>
</j:Grid>
