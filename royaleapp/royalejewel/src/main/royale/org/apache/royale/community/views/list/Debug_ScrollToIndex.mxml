<?xml version="1.0" encoding="utf-8"?>
<j:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:j="library://ns.apache.org/royale/jewel"
        xmlns:js="library://ns.apache.org/royale/basic"
        xmlns:jc="library://ns.apache.org/royale/community"
        xmlns:html="library://ns.apache.org/royale/html"
    initComplete="onInitComplete()">

    <fx:Script>
        <![CDATA[
        import org.apache.royale.collections.ArrayList;
        import org.apache.royale.collections.ArrayListView;
        import org.apache.royale.core.IStyledUIBase;
        import org.apache.royale.core.IScrollingViewport;
        import org.apache.royale.jewel.List;
        import org.apache.royale.community.controls.ListJwExt;
        import org.apache.royale.jewel.TextInput;

        public function onInitComplete():void
        {
            onSearchHandler(true);
        }

        [Bindable]
        private var dp0_99:ArrayList = new ArrayList;
        private var totalCases:Number = 0;

        private function initControls():void
        {
            exampleNumSeachInput.text = "";
            exampleNumListJewel.selectedIndex = exampleNumListCustom.selectedIndex = -1;
            nsIndexToJewel.text = nsIndexToCustom.text = "0";
            nIndexToJewel.text = nIndexToCustom.text = "-1";
            exampleNumListJewel.dataProvider = dp0_99;
            exampleNumListCustom.dataProvider = dp0_99;
            setSelectedIndex(exampleNumListJewel);
            exampleNumListJewel.scrollToIndex(0);
            txtInfo.html = txtInfo2.html = "";
            if(currentState == "jewelList0"){
                chMoveListCustom.selected = false;
                chMoveListJewel.selected = true;
                chMoveListBoth.selected = false;
                selectListToMove(false,true,false);
            }else{
                chMoveListCustom.selected = false;
                chMoveListJewel.selected = false;
                chMoveListBoth.selected = true;
                selectListToMove(false,false,true);
            }
        }
        private function onSearchHandler(init:Boolean = false):void
        {
            if(init)
            {
                var ar:Array = new Array();
                for(var index:int = 0; index < 100; index++)
                {
                    ar.push(index.toString());
                }
                dp0_99 = new ArrayList(ar);
            }

            if(exampleNumSeachInput.text == "")
            {
                initControls();
            }else
            {
                var alv:ArrayListView = new ArrayListView(dp0_99);
                alv.filterFunction = inFilterHandler;
                alv.refresh();
                exampleNumListJewel.dataProvider = new ArrayList(alv.toArray());
                exampleNumListCustom.dataProvider = new ArrayList(alv.toArray());
            }

        }

        private function inFilterHandler(item:Object):Boolean {
            if(!item)
                return false;

            var reg:String = item as String;
            var searchTxt:String = exampleNumSeachInput.text.toUpperCase();

            return (reg.toUpperCase().indexOf(searchTxt) != -1);
        }

        private function onScrollToIndex(event:Event):void
        {
            if( (event.target as TextInput) == nsIndexToJewel)
            {
                exampleNumListJewel.scrollToIndex(int(nsIndexToJewel.text));
                if(chMoveListBoth.selected){
                    nsIndexToCustom.text = nsIndexToJewel.text;
                    exampleNumListCustom.scrollToIndex(int(nsIndexToCustom.text));
                }
            }else{
                exampleNumListCustom.scrollToIndex(int(nsIndexToCustom.text));
                if(chMoveListBoth.selected){
                    nsIndexToJewel.text = nsIndexToCustom.text;
                    exampleNumListJewel.scrollToIndex(int(nsIndexToJewel.text));
                }
            }
        }

        private function onChangeTxtIndex(event:Event):void
        {
            if( (event.target as TextInput) == nIndexToJewel)
            {
                setSelectedIndex(exampleNumListJewel);
            }else{
                setSelectedIndex(exampleNumListCustom);
            }
        }

        private function setSelectedIndex(ctrList:List,idx:int = -1):void
        {
            if( ctrList == exampleNumListJewel)
            {
                if(idx == -1)
                    idx = int(nIndexToJewel.text);
                exampleNumListJewel.selectedIndex = idx;
                if(chForceScrollToIndex.selected)
                    exampleNumListJewel.scrollToIndex(idx);
                putInfoMove(exampleNumListJewel);
                if(chMoveListBoth.selected){
                    exampleNumListCustom.selectedIndex = idx;
                    putInfoMove(exampleNumListCustom);
                }
            }else{
                if(idx == -1)
                    idx = int(nIndexToCustom.text);
                exampleNumListCustom.selectedIndex = idx;
                putInfoMove(exampleNumListCustom);
                if(chMoveListBoth.selected){
                    exampleNumListJewel.selectedIndex = idx;
                    if(chForceScrollToIndex.selected)
                        exampleNumListJewel.scrollToIndex(idx);
                    putInfoMove(exampleNumListJewel);
                }
            }
        }

        private function putInfoMove(ctrlList:List):void
        {

            var index:int = ctrlList.selectedItem ? ctrlList.selectedIndex : -1;

			var scrollArea:HTMLElement = (ctrlList as IStyledUIBase).element;
			var oldScroll:Number = scrollArea.scrollTop;

            var viewport:IScrollingViewport = ctrlList.getBeadByType(IScrollingViewport) as IScrollingViewport;
			var totalHeight:Number = 0;
			var scrollToProposed:Number;
			var scrollMaxVisible1:Number = scrollArea.scrollTop + scrollArea.clientHeight;
            var scrollMaxVisible2:Number = scrollArea.scrollTop + scrollArea.offsetHeight;

            var strInfo:String = 'ScrollTop: '+scrollArea.scrollTop.toString()+'\n'+
            'ScrollHeight: '+scrollArea.scrollHeight.toString()+'\n'+
            'scrollMaxVisible (*): ';
            if(ctrlList == exampleNumListJewel){
                strInfo += scrollMaxVisible1.toString()+'\n';
                nsIndexToJewel.text = scrollArea.scrollTop.toString();
            }else{
                strInfo += scrollMaxVisible2.toString()+'\n';
                nsIndexToCustom.text = scrollArea.scrollTop.toString();
            }
            strInfo += 'VerticalScrollPosition: '+viewport.verticalScrollPosition.toString()+'\n'+
            'offsetHeight: '+scrollArea.offsetHeight.toString()+'\n'+
            'clientHeight: '+scrollArea.clientHeight.toString()+'\n'+
            'Height: '+ctrlList.height.toString();

            if(ctrlList == exampleNumListJewel)
                txtInfo.html = strInfo;
            else
                txtInfo2.html = strInfo;
        }

        private function onChangeList(event:Event):void
        {
            var idx:int = -1;
            if( (event.target as List) == exampleNumListJewel)
            {
                idx = exampleNumListJewel.selectedIndex;
                putInfoMove(exampleNumListJewel);
                if(chMoveListBoth.selected){
                    exampleNumListCustom.selectedIndex = idx;
                    putInfoMove(exampleNumListCustom);
                }
            }else{
                idx = exampleNumListCustom.selectedIndex;
                putInfoMove(exampleNumListCustom);
                if(chMoveListBoth.selected){
                    exampleNumListJewel.selectedIndex = idx;
                    putInfoMove(exampleNumListJewel);
                }
            }
        }

        private function onMoveTo(first:Boolean,prev:Boolean,next:Boolean,last:Boolean):void
        {
            var indexproposedcustom:int = -1;
            var indexproposedjewel:int = -1;
            var ctrlListJewel:List;
            var ctrlListwp:ListJwExt;
            if(chMoveListBoth.selected || chMoveListJewel.selected)
                ctrlListJewel = exampleNumListJewel;

            if(chMoveListBoth.selected || chMoveListCustom.selected)
                ctrlListwp = exampleNumListCustom;

            if(first){
                if(ctrlListJewel)
                    indexproposedcustom = 0;
                if(ctrlListwp)
                    indexproposedjewel = 0;
            }else if(last){
                if(ctrlListJewel)
                    indexproposedcustom = (ctrlListJewel.dataProvider as ArrayList).length-1;;
                if(ctrlListwp)
                    indexproposedjewel = (ctrlListwp.dataProvider as ArrayList).length-1;;
            }else{
                if(prev){
                    if(ctrlListJewel && ctrlListJewel.selectedIndex>0)
                        indexproposedcustom = ctrlListJewel.selectedIndex -1;
                    if(ctrlListwp && ctrlListwp.selectedIndex>0)
                        indexproposedjewel = ctrlListwp.selectedIndex -1;
                }else{ //next
                    if(ctrlListJewel && ctrlListJewel.selectedIndex < (ctrlListJewel.dataProvider as ArrayList).length-1)
                        indexproposedcustom = ctrlListJewel.selectedIndex +1;
                    if(ctrlListwp && ctrlListwp.selectedIndex < (ctrlListwp.dataProvider as ArrayList).length-1)
                        indexproposedjewel = ctrlListwp.selectedIndex +1;
                }
            }
            if(ctrlListJewel)
                setSelectedIndex(ctrlListJewel,indexproposedcustom);
            else if(ctrlListwp)
                setSelectedIndex(ctrlListwp,indexproposedjewel);
        }

        private function selectListToMove(custom:Boolean,jew:Boolean,both:Boolean):void
        {
            var selcustom:Boolean = custom;
            var seljewel:Boolean = jew;
            var selboth:Boolean = both;

            if(jew)
            {
                seljewel = true;
                selcustom = false;
                selboth = false;
            }else if(custom)
            {
                seljewel = false;
                selcustom = true;
                selboth = false;
            }else
            {
                seljewel = false;
                selcustom = false;
                selboth = true;
            }

            /*var selcustom:Boolean = (custom && chMoveListCustom.selected);
            var seljewel:Boolean = (jew && chMoveListJewel.selected);
            var selboth:Boolean = (both && chMoveListBoth.selected);
            if(!selcustom && !seljewel && !selboth){
                if(!both)
                    selboth = true;
                else if(!custom)
                    selcustom = true;
                else
                    seljewel = true;
            }*/

            chMoveListCustom.selected = selcustom;
            chMoveListJewel.selected = seljewel;
            chMoveListBoth.selected = selboth;

            if(selcustom || selboth)
                currentState = "jewelList1";
            else
                currentState = "jewelList0";
        }

        private function changePresentation(setVarHeight:Boolean):void
        {
            //
            if(setVarHeight)
            {
                exampleNumListPresModel.variableRowHeight = exampleNumListPresModel2.variableRowHeight = chvariable.selected;
                nsrow.text = "-";
            }else{
                exampleNumListPresModel.rowHeight = exampleNumListPresModel2.rowHeight = int(nsrow.text);
            }

            exampleNumListJewel.dataProvider = new ArrayList();
            exampleNumListJewel.dataProvider = dp0_99;

            exampleNumListCustom.dataProvider = new ArrayList();
            exampleNumListCustom.dataProvider = dp0_99;
        }

        private function clickPutSelectedIndex():void
        {
            if(chMoveListJewel.selected || chMoveListBoth.selected)
                exampleNumListJewel.selectedIndex=int(txtPutScroll.text);
            if(chMoveListCustom.selected || chMoveListBoth.selected)
                exampleNumListCustom.selectedIndex=int(txtPutScroll.text);
        }

        private function chForceScrollChange(withBead:Boolean):void
        {
            initControls();
            if(!withBead)
            {
                if(chForceScrollToIndex.selected && chForceScrollToIndexByBead.selected)
                    chForceScrollToIndexByBead.selected = false;
            }else{
                if(chForceScrollToIndexByBead.selected && chForceScrollToIndex.selected)
                    chForceScrollToIndex.selected = false;

            }

        }
        ]]>
    </fx:Script>

	<fx:Style>
        @namespace js "library://ns.apache.org/royale/basic";
        @namespace j "library://ns.apache.org/royale/jewel";
        @namespace jc "library://ns.apache.org/royale/community";

        j|List {
        IBeadView: ClassReference("org.apache.royale.jewel.beads.views.ListView");
        IBeadController: ClassReference("org.apache.royale.jewel.beads.controllers.ListSingleSelectionMouseController");
        IBeadKeyController: ClassReference("org.apache.royale.jewel.beads.controllers.ListKeyDownController");
        IItemRendererClassFactory: ClassReference("org.apache.royale.core.SelectableItemRendererClassFactory");
        IItemRenderer: ClassReference("org.apache.royale.jewel.itemRenderers.ListItemRenderer");
        IItemRendererInitializer: ClassReference("org.apache.royale.jewel.beads.itemRenderers.ListItemRendererInitializer");
        ISelectableItemRenderer: ClassReference("org.apache.royale.jewel.beads.itemRenderers.ClassSelectorListSelectableItemRendererBead");
        IViewport: ClassReference("org.apache.royale.jewel.supportClasses.scrollbar.ScrollingViewport");
        IBeadModel: ClassReference("org.apache.royale.jewel.beads.models.ArrayListSelectionModel");
        IDataProviderItemRendererMapper: ClassReference("org.apache.royale.html.beads.SelectionDataItemRendererFactoryForCollectionView");
        }
        
        jc|ListJwExt {
        /* Custom scrollToIndex */
        IBeadView: ClassReference("org.apache.royale.community.jewel.beads.views.ListViewJwExt");
        /* Custom selectedHandler only realchange*/
        IBeadController: ClassReference("org.apache.royale.community.jewel.beads.controllers.ListSingleSelectionMouseControllerJwExt");
        /* Custom ArrayListSelectionModelJwExt - TODO - IComparable */
        IBeadModel: ClassReference("org.apache.royale.community.jewel.beads.models.ArrayListSelectionModelJwExt");

        IBeadKeyController: ClassReference("org.apache.royale.jewel.beads.controllers.ListKeyDownController");
        IItemRendererClassFactory: ClassReference("org.apache.royale.core.SelectableItemRendererClassFactory");
        IItemRenderer: ClassReference("org.apache.royale.jewel.itemRenderers.ListItemRenderer");
        IItemRendererInitializer: ClassReference("org.apache.royale.jewel.beads.itemRenderers.ListItemRendererInitializer");
        ISelectableItemRenderer: ClassReference("org.apache.royale.jewel.beads.itemRenderers.ClassSelectorListSelectableItemRendererBead");
        IViewport: ClassReference("org.apache.royale.jewel.supportClasses.scrollbar.ScrollingViewport");
        IDataProviderItemRendererMapper: ClassReference("org.apache.royale.html.beads.SelectionDataItemRendererFactoryForCollectionView");
        }

	</fx:Style>
    <j:states>
        <js:State name="jewelList0"/>
        <js:State name="jewelListJewel"/>
    </j:states>
    <j:beads>
        <js:SimpleStatesImpl/>
        <js:ViewDataBinding/>
		<js:BrowserResizeListener/>
    </j:beads>
    <j:Card itemsExpand="false" percentHeight="100" percentWidth="100">
        <j:CardHeader>
            <j:BarSection width="100%" gap="10">
                <html:H3 text="Scroll To Index - Debugger" className="primary-dark block-with-text "/>
            </j:BarSection>
        </j:CardHeader>

        <j:CardPrimaryContent height="100%" >
            <j:HGroup percentWidth="100" percentHeight="100" gap="5" itemsHorizontalAlign="itemsLeft" itemsVerticalAlign="itemsTop">

                <j:VGroup gap="3" percentWidth="50" minWidth="30" height="100%" visible.jewelListJewel="false">

                    <j:HGroup percentHeight="100" percentWidth="100" style="overflow:auto;">
                        <j:Image src="assets/examples/JewelListViewselectionChange.png" style="height: auto;width: 100%;"/>
                    </j:HGroup>

                    <j:HGroup height="35" gap="10" itemsVerticalAlign="itemsCenter">
                        <j:CheckBox localId="chForceScrollToIndex" selected="false" change="chForceScrollChange(false)" text="Force scrollToIndex (By Code)"/>
                        <j:CheckBox localId="chForceScrollToIndexByBead" selected="false" change="chForceScrollChange(true)" text="Force scrollToIndex (By ScrollIIndexToSelection Bead)"/>
                    </j:HGroup>

                    <j:HGroup percentHeight="100" percentWidth="100" style="overflow:auto;">
                        <j:Image src="assets/examples/JewelListViewscrollToIndex.png" visible="{chForceScrollToIndex.selected}" style="height: auto;width: 100%;"/>
                    </j:HGroup>

                </j:VGroup>

                <j:VGroup gap="3" percentWidth="32" percentWidth.jewelList0="25" minWidth="30" height="100%">

                    <j:HGroup percentWidth="100" gap="5" height="35" itemsVerticalAlign="itemsCenter">

                        <j:IconTextInput localId="exampleNumSeachInput" rightPosition="false" width="100%" text="" change="onSearchHandler()" >
                            <j:beads>
                                <j:TextPrompt prompt="Search..."/>
                            </j:beads>
                            <j:icon>
                                <js:FontAwesomeIcon text="{FontAwesome5IconType.SEARCH}" emphasis="primary" className="primary-dark"
                                faStyle="{FontAwesomeIcon.DUOTONE}" relativeSize="{FontAwesomeIcon.SIZE_LG}"/>
                            </j:icon>
                        </j:IconTextInput>
                        <j:IconButton unboxed="true" click="initControls()">
                            <j:icon>
                                <js:FontAwesomeIcon text="{FontAwesome5IconType.SYNC}" faStyle="{FontAwesomeIcon.REGULAR}" relativeSize="{FontAwesomeIcon.SIZE_LG}"/>
                            </j:icon>
                            <j:beads>
                                <j:ToolTip toolTip="Reset"/>
                            </j:beads>
                        </j:IconButton>
                    </j:HGroup>

                    <j:HGroup percentWidth="100" gap="3" height="35" itemsHorizontalAlign="itemsLeft" itemsVerticalAlign="itemsCenter"
                        style="background-color: #19416b; color: #ffffff;font-weight: bold;">
                        <j:Label text="ListView - Default (0..99)" width="100%" >
                            <j:beads>
                                <j:TruncateText/>
                                <js:Paddings paddingLeft="5"/>
                            </j:beads>
                        </j:Label>
                    </j:HGroup>

                    <j:List localId="exampleNumListJewel" percentWidth="100" height="425" change="onChangeList(event)" >
                        <j:beads>
                            <j:ListAlternateRowColor />
                            <j:ListPresentationModel localId="exampleNumListPresModel" variableRowHeight="false" rowHeight="35"/>
                            <j:Disabled disabled="{chMoveListCustom.selected}"/>
                        </j:beads>
                    </j:List>

                    <j:VGroup percentWidth="100" gap="3" minHeight="20">
                        <j:Label multiline="true" localId="txtInfo" percentWidth="100"/>
                    </j:VGroup>
                </j:VGroup>

                <j:VGroup gap="3" percentWidth="32" minWidth="30" height="100%" visible.jewelList0="false">

                    <j:HGroup percentWidth="100" gap="5" height="35" itemsVerticalAlign="itemsCenter">
                        <j:TextInput localId="txtPutScroll" width="100%" />
                        <j:IconButton unboxed="true" click="clickPutSelectedIndex()">
                            <j:icon>
                                <js:FontAwesomeIcon text="{FontAwesome5IconType.ARROW_CIRCLE_DOWN}" faStyle="{FontAwesomeIcon.REGULAR}" relativeSize="{FontAwesomeIcon.SIZE_LG}"/>
                            </j:icon>
                            <j:beads>
                                <j:ToolTip toolTip="Scroll to Index: {txtPutScroll.text}"/>
                            </j:beads>
                        </j:IconButton>
                    </j:HGroup>

                    <j:HGroup percentWidth="100" gap="3" height="35" itemsHorizontalAlign="itemsLeft" itemsVerticalAlign="itemsCenter"
                        style="background-color: #19416b; color: #ffffff;font-weight: bold;">
                        <j:Label text="ListView - Custom (0..99)" width="100%" >
                            <j:beads>
                                <j:TruncateText/>
                                <js:Paddings paddingLeft="5"/>
                            </j:beads>
                        </j:Label>
                    </j:HGroup>

                    <jc:ListJwExt localId="exampleNumListCustom" percentWidth="100"  height="425"
                    change="onChangeList(event)">
                        <jc:beads>
                            <j:ListAlternateRowColor />
                            <j:ListPresentationModel localId="exampleNumListPresModel2" variableRowHeight="false" rowHeight="35"/>
                            <j:Disabled disabled="{chMoveListJewel.selected}"/>
                        </jc:beads>
                    </jc:ListJwExt>

                    <j:VGroup percentWidth="100" gap="3" minHeight="20">
                        <j:Label multiline="true" localId="txtInfo2" percentWidth="100"/>
                    </j:VGroup>

                </j:VGroup>

                <j:VGroup gap="3" percentWidth="36" percentWidth.jewelList0="25" minWidth="20" height="100%">
                    <j:VGroup>
                        <j:Label text="Height of Row : "/>
                        <j:HGroup percentWidth="100" itemsVerticalAlign="itemsCenter">
                            <j:TextInput localId="nsrow"  width="100%" text="{exampleNumListPresModel.rowHeight}"/>
                            <j:IconButton unboxed="true" click="changePresentation(false)" text="Set">
                                <j:icon>
                                    <js:FontAwesomeIcon text="{FontAwesome5IconType.ARROW_CIRCLE_DOWN}" faStyle="{FontAwesomeIcon.REGULAR}" relativeSize="{FontAwesomeIcon.SIZE_LG}"/>
                                </j:icon>
                            </j:IconButton>
                        </j:HGroup>
                    </j:VGroup>
                    <j:VGroup height="35" itemsVerticalAlign="itemsCenter">
                        <j:CheckBox localId="chvariable" change="changePresentation(true)" text="Variable Row Height"/>
                    </j:VGroup>

                    <j:HGroup percentWidth="100" gap="5" height="45" itemsHorizontalAlign="itemsCenter" itemsVerticalAlign="itemsCenter"
                        style="border: 1px solid #19416b;">
                        <j:CheckBox localId="chMoveListJewel" text="j|List" click="selectListToMove(false,true,false)" selected="true"/>
                        <j:CheckBox localId="chMoveListCustom" text="jc|List" click="selectListToMove(true,false,false)"/>
                        <j:CheckBox localId="chMoveListBoth" text="Both" click="selectListToMove(false,false,true)"/>
                    </j:HGroup>

                    <j:HGroup percentWidth="100" gap="3" height="35" itemsHorizontalAlign="itemsCenter" itemsVerticalAlign="itemsCenter"
                        style="background-color: #19416b; color: #ffffff;font-weight: bold;">
                        <j:IconButton unboxed="true" click="onMoveTo(true,false,false,false)">
                            <j:icon>
                                <js:FontAwesomeIcon text="{FontAwesome5IconType.STEP_BACKWARD}"
                                faStyle="{FontAwesomeIcon.REGULAR}" relativeSize="{FontAwesomeIcon.SIZE_LG}"/>
                            </j:icon>
                        </j:IconButton>
                        <j:IconButton unboxed="true" click="onMoveTo(false,true,false,false)">
                            <j:icon>
                                <js:FontAwesomeIcon text="{FontAwesome5IconType.ARROW_LEFT}"
                                faStyle="{FontAwesomeIcon.REGULAR}" relativeSize="{FontAwesomeIcon.SIZE_LG}"/>
                            </j:icon>
                        </j:IconButton>

                        <j:Label text="{exampleNumListJewel.selectedIndex}" width="50%" >
                            <j:beads>
                                <j:TextAlign align="center"/>
                                <j:TruncateText/>
                            </j:beads>
                        </j:Label>

                        <j:Label text="{exampleNumListCustom.selectedIndex}" width="50%" >
                            <j:beads>
                                <j:TextAlign align="center"/>
                                <j:TruncateText/>
                            </j:beads>
                        </j:Label>

                        <j:IconButton unboxed="true" click="onMoveTo(false,false,true,false)">
                            <j:icon>
                                <js:FontAwesomeIcon text="{FontAwesome5IconType.ARROW_RIGHT}"
                                faStyle="{FontAwesomeIcon.REGULAR}" relativeSize="{FontAwesomeIcon.SIZE_LG}"/>
                            </j:icon>
                        </j:IconButton>
                        <j:IconButton unboxed="true" click="onMoveTo(false,false,false,true)">
                            <j:icon>
                                <js:FontAwesomeIcon text="{FontAwesome5IconType.STEP_FORWARD}"
                                faStyle="{FontAwesomeIcon.REGULAR}" relativeSize="{FontAwesomeIcon.SIZE_LG}"/>
                            </j:icon>
                        </j:IconButton>
                    </j:HGroup>

                    <j:HGroup percentWidth="100" gap="5" itemsHorizontalAlign="itemsLeft" itemsVerticalAlign="itemsCenter">
                        <j:VGroup percentWidth="50">
                            <j:Label text="Scroll To Index :" minHeight="20"/>
                            <j:HGroup height="35" percentWidth="100" gap="3" itemsHorizontalAlign="itemsLeft" itemsVerticalAlign="itemsCenter">
                                <j:TextInput localId="nsIndexToJewel"  width="50%" change="onScrollToIndex(event)">
                                    <j:beads>
                                        <j:Disabled disabled="{chMoveListCustom.selected}"/>
                                    </j:beads>
                                </j:TextInput>
                                <j:TextInput localId="nsIndexToCustom"  width="50%" change="onScrollToIndex(event)">
                                    <j:beads>
                                        <j:Disabled disabled="{chMoveListJewel.selected}"/>
                                    </j:beads>
                                </j:TextInput>
                            </j:HGroup>
                        </j:VGroup>
                        <j:VGroup percentWidth="50">
                            <j:Label text="Select the Index :" minHeight="20"/>
                            <j:HGroup height="35" percentWidth="100" gap="3" itemsHorizontalAlign="itemsLeft" itemsVerticalAlign="itemsCenter">
                                <j:TextInput localId="nIndexToJewel" width="100%" text="{exampleNumListJewel.selectedIndex}" change="onChangeTxtIndex(event)">
                                    <j:beads>
                                        <j:Disabled disabled="{chMoveListCustom.selected}"/>
                                    </j:beads>
                                </j:TextInput>
                                <j:TextInput localId="nIndexToCustom" width="100%" text="{exampleNumListCustom.selectedIndex}" change="onChangeTxtIndex(event)">
                                    <j:beads>
                                        <j:Disabled disabled="{chMoveListJewel.selected}"/>
                                    </j:beads>
                                </j:TextInput>
                            </j:HGroup>
                        </j:VGroup>
                    </j:HGroup>

                </j:VGroup>

            </j:HGroup>
        </j:CardPrimaryContent>

    </j:Card>
</j:VGroup>
