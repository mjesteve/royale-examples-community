{"version":3,"file":"main.js","sources":["src/options-refiners.ts","src/event-source-refiners.ts","src/main.ts"],"sourcesContent":["// rename this file to options.ts like other packages?\n\nexport const OPTION_REFINERS = {\n  googleCalendarApiKey: String,\n}\n","import { identity, Identity, Dictionary } from '@fullcalendar/common'\n\nexport const EVENT_SOURCE_REFINERS = {\n  googleCalendarApiKey: String, // TODO: rename with no prefix?\n  googleCalendarId: String,\n  googleCalendarApiBase: String,\n  extraParams: identity as Identity<Dictionary | (() => Dictionary)>,\n}\n","import { createPlugin, EventSourceDef, addDays, DateEnv, requestJson, Dictionary } from '@fullcalendar/common'\nimport { OPTION_REFINERS } from './options-refiners'\nimport './options-declare'\nimport { EVENT_SOURCE_REFINERS } from './event-source-refiners'\nimport './event-source-declare'\n\n// TODO: expose somehow\nconst API_BASE = 'https://www.googleapis.com/calendar/v3/calendars'\n\ninterface GCalMeta {\n  googleCalendarId: string\n  googleCalendarApiKey?: string\n  googleCalendarApiBase?: string,\n  extraParams?: Dictionary | (() => Dictionary)\n}\n\nlet eventSourceDef: EventSourceDef<GCalMeta> = {\n\n  parseMeta(refined): GCalMeta | null {\n    let { googleCalendarId } = refined\n\n    if (!googleCalendarId && refined.url) {\n      googleCalendarId = parseGoogleCalendarId(refined.url)\n    }\n\n    if (googleCalendarId) {\n      return {\n        googleCalendarId,\n        googleCalendarApiKey: refined.googleCalendarApiKey,\n        googleCalendarApiBase: refined.googleCalendarApiBase,\n        extraParams: refined.extraParams,\n      }\n    }\n\n    return null\n  },\n\n  fetch(arg, onSuccess, onFailure) {\n    let { dateEnv, options } = arg.context\n    let meta: GCalMeta = arg.eventSource.meta\n    let apiKey = meta.googleCalendarApiKey || options.googleCalendarApiKey\n\n    if (!apiKey) {\n      onFailure({\n        message: 'Specify a googleCalendarApiKey. See http://fullcalendar.io/docs/google_calendar/',\n      })\n    } else {\n      let url = buildUrl(meta)\n\n      // TODO: make DRY with json-feed-event-source\n      let { extraParams } = meta\n      let extraParamsObj = typeof extraParams === 'function' ? extraParams() : extraParams\n\n      let requestParams = buildRequestParams(\n        arg.range,\n        apiKey,\n        extraParamsObj,\n        dateEnv,\n      )\n\n      requestJson('GET', url, requestParams, (body, xhr) => {\n        if (body.error) {\n          onFailure({\n            message: 'Google Calendar API: ' + body.error.message,\n            errors: body.error.errors,\n            xhr,\n          })\n        } else {\n          onSuccess({\n            rawEvents: gcalItemsToRawEventDefs(\n              body.items,\n              requestParams.timeZone,\n            ),\n            xhr,\n          })\n        }\n      }, (message, xhr) => {\n        onFailure({ message, xhr })\n      })\n    }\n  },\n}\n\nfunction parseGoogleCalendarId(url) {\n  let match\n\n  // detect if the ID was specified as a single string.\n  // will match calendars like \"asdf1234@calendar.google.com\" in addition to person email calendars.\n  if (/^[^/]+@([^/.]+\\.)*(google|googlemail|gmail)\\.com$/.test(url)) {\n    return url\n  }\n\n  if (\n    (match = /^https:\\/\\/www.googleapis.com\\/calendar\\/v3\\/calendars\\/([^/]*)/.exec(url)) ||\n    (match = /^https?:\\/\\/www.google.com\\/calendar\\/feeds\\/([^/]*)/.exec(url))\n  ) {\n    return decodeURIComponent(match[1])\n  }\n\n  return null\n}\n\nfunction buildUrl(meta) {\n  let apiBase = meta.googleCalendarApiBase\n  if (!apiBase) {\n    apiBase = API_BASE\n  }\n  return apiBase + '/' + encodeURIComponent(meta.googleCalendarId) + '/events'\n}\n\nfunction buildRequestParams(range, apiKey: string, extraParams: Dictionary, dateEnv: DateEnv) {\n  let params\n  let startStr\n  let endStr\n\n  if (dateEnv.canComputeOffset) {\n    // strings will naturally have offsets, which GCal needs\n    startStr = dateEnv.formatIso(range.start)\n    endStr = dateEnv.formatIso(range.end)\n  } else {\n    // when timezone isn't known, we don't know what the UTC offset should be, so ask for +/- 1 day\n    // from the UTC day-start to guarantee we're getting all the events\n    // (start/end will be UTC-coerced dates, so toISOString is okay)\n    startStr = addDays(range.start, -1).toISOString()\n    endStr = addDays(range.end, 1).toISOString()\n  }\n\n  params = {\n    ...(extraParams || {}),\n    key: apiKey,\n    timeMin: startStr,\n    timeMax: endStr,\n    singleEvents: true,\n    maxResults: 9999,\n  }\n\n  if (dateEnv.timeZone !== 'local') {\n    params.timeZone = dateEnv.timeZone\n  }\n\n  return params\n}\n\nfunction gcalItemsToRawEventDefs(items, gcalTimezone) {\n  return items.map((item) => gcalItemToRawEventDef(item, gcalTimezone))\n}\n\nfunction gcalItemToRawEventDef(item, gcalTimezone) {\n  let url = item.htmlLink || null\n\n  // make the URLs for each event show times in the correct timezone\n  if (url && gcalTimezone) {\n    url = injectQsComponent(url, 'ctz=' + gcalTimezone)\n  }\n\n  return {\n    id: item.id,\n    title: item.summary,\n    start: item.start.dateTime || item.start.date, // try timed. will fall back to all-day\n    end: item.end.dateTime || item.end.date, // same\n    url,\n    location: item.location,\n    description: item.description,\n    attachments: item.attachments || [],\n    extendedProps: (item.extendedProperties || {}).shared || {},\n  }\n}\n\n// Injects a string like \"arg=value\" into the querystring of a URL\n// TODO: move to a general util file?\nfunction injectQsComponent(url, component) {\n  // inject it after the querystring but before the fragment\n  return url.replace(\n    /(\\?.*?)?(#|$)/,\n    (whole, qs, hash) => (qs ? qs + '&' : '?') + component + hash,\n  )\n}\n\nexport default createPlugin({\n  eventSourceDefs: [eventSourceDef],\n  optionRefiners: OPTION_REFINERS,\n  eventSourceRefiners: EVENT_SOURCE_REFINERS,\n})\n"],"names":[],"mappings":"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"}