{"version":3,"file":"main.esm.js","sources":["../../../node_modules/tslib/tslib.es6.js","../src/TimeGridEventRenderer.ts","../src/TimeGridMirrorRenderer.ts","../src/TimeGridFillRenderer.ts","../src/TimeGrid.ts","../src/AllDaySplitter.ts","../src/AbstractTimeGridView.ts","../src/SimpleTimeGrid.ts","../src/TimeGridView.ts","../src/main.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import {\n  htmlEscape, cssToStr,\n  removeElement, applyStyle,\n  createFormatter, DateFormatter,\n  FgEventRenderer, buildSegCompareObj,\n  Seg, isMultiDayRange, compareByFieldSpecs\n} from '@fullcalendar/core'\nimport TimeGrid from './TimeGrid'\n\n/*\nOnly handles foreground segs.\nDoes not own rendering. Use for low-level util methods by TimeGrid.\n*/\nexport default class TimeGridEventRenderer extends FgEventRenderer {\n\n  timeGrid: TimeGrid\n  segsByCol: any // within each col, events are ordered\n  fullTimeFormat: DateFormatter\n\n\n  constructor(timeGrid: TimeGrid) {\n    super(timeGrid.context)\n\n    this.timeGrid = timeGrid\n\n    this.fullTimeFormat = createFormatter({\n      hour: 'numeric',\n      minute: '2-digit',\n      separator: this.context.options.defaultRangeSeparator\n    })\n  }\n\n\n  // Given an array of foreground segments, render a DOM element for each, computes position,\n  // and attaches to the column inner-container elements.\n  attachSegs(segs: Seg[], mirrorInfo) {\n    let segsByCol = this.timeGrid.groupSegsByCol(segs)\n\n    // order the segs within each column\n    // TODO: have groupSegsByCol do this?\n    for (let col = 0; col < segsByCol.length; col++) {\n      segsByCol[col] = this.sortEventSegs(segsByCol[col])\n    }\n\n    this.segsByCol = segsByCol\n    this.timeGrid.attachSegsByCol(segsByCol, this.timeGrid.fgContainerEls)\n  }\n\n\n  detachSegs(segs: Seg[]) {\n    segs.forEach(function(seg) {\n      removeElement(seg.el)\n    })\n\n    this.segsByCol = null\n  }\n\n\n  computeSegSizes(allSegs: Seg[]) {\n    let { timeGrid, segsByCol } = this\n    let colCnt = timeGrid.colCnt\n\n    timeGrid.computeSegVerticals(allSegs) // horizontals relies on this\n\n    if (segsByCol) {\n      for (let col = 0; col < colCnt; col++) {\n        this.computeSegHorizontals(segsByCol[col]) // compute horizontal coordinates, z-index's, and reorder the array\n      }\n    }\n  }\n\n\n  assignSegSizes(allSegs: Seg[]) {\n    let { timeGrid, segsByCol } = this\n    let colCnt = timeGrid.colCnt\n\n    timeGrid.assignSegVerticals(allSegs) // horizontals relies on this\n\n    if (segsByCol) {\n      for (let col = 0; col < colCnt; col++) {\n        this.assignSegCss(segsByCol[col])\n      }\n    }\n  }\n\n\n  // Computes a default event time formatting string if `eventTimeFormat` is not explicitly defined\n  computeEventTimeFormat() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      meridiem: false\n    }\n  }\n\n\n  // Computes a default `displayEventEnd` value if one is not expliclty defined\n  computeDisplayEventEnd() {\n    return true\n  }\n\n\n  // Renders the HTML for a single event segment's default rendering\n  renderSegHtml(seg: Seg, mirrorInfo) {\n    let { view } = this.context\n    let eventRange = seg.eventRange\n    let eventDef = eventRange.def\n    let eventUi = eventRange.ui\n    let allDay = eventDef.allDay\n    let isDraggable = view.computeEventDraggable(eventDef, eventUi)\n    let isResizableFromStart = seg.isStart && view.computeEventStartResizable(eventDef, eventUi)\n    let isResizableFromEnd = seg.isEnd && view.computeEventEndResizable(eventDef, eventUi)\n    let classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd, mirrorInfo)\n    let skinCss = cssToStr(this.getSkinCss(eventUi))\n    let timeText\n    let fullTimeText // more verbose time text. for the print stylesheet\n    let startTimeText // just the start time text\n\n    classes.unshift('fc-time-grid-event')\n\n    // if the event appears to span more than one day...\n    if (isMultiDayRange(eventRange.range)) {\n      // Don't display time text on segments that run entirely through a day.\n      // That would appear as midnight-midnight and would look dumb.\n      // Otherwise, display the time text for the *segment's* times (like 6pm-midnight or midnight-10am)\n      if (seg.isStart || seg.isEnd) {\n        let unzonedStart = seg.start\n        let unzonedEnd = seg.end\n        timeText = this._getTimeText(unzonedStart, unzonedEnd, allDay) // TODO: give the timezones\n        fullTimeText = this._getTimeText(unzonedStart, unzonedEnd, allDay, this.fullTimeFormat)\n        startTimeText = this._getTimeText(unzonedStart, unzonedEnd, allDay, null, false) // displayEnd=false\n      }\n    } else {\n      // Display the normal time text for the *event's* times\n      timeText = this.getTimeText(eventRange)\n      fullTimeText = this.getTimeText(eventRange, this.fullTimeFormat)\n      startTimeText = this.getTimeText(eventRange, null, false) // displayEnd=false\n    }\n\n    return '<a class=\"' + classes.join(' ') + '\"' +\n      (eventDef.url ?\n        ' href=\"' + htmlEscape(eventDef.url) + '\"' :\n        ''\n        ) +\n      (skinCss ?\n        ' style=\"' + skinCss + '\"' :\n        ''\n        ) +\n      '>' +\n        '<div class=\"fc-content\">' +\n          (timeText ?\n            '<div class=\"fc-time\"' +\n            ' data-start=\"' + htmlEscape(startTimeText) + '\"' +\n            ' data-full=\"' + htmlEscape(fullTimeText) + '\"' +\n            '>' +\n              '<span>' + htmlEscape(timeText) + '</span>' +\n            '</div>' :\n            ''\n            ) +\n          (eventDef.title ?\n            '<div class=\"fc-title\">' +\n              htmlEscape(eventDef.title) +\n            '</div>' :\n            ''\n            ) +\n        '</div>' +\n        /* TODO: write CSS for this\n        (isResizableFromStart ?\n          '<div class=\"fc-resizer fc-start-resizer\"></div>' :\n          ''\n          ) +\n        */\n        (isResizableFromEnd ?\n          '<div class=\"fc-resizer fc-end-resizer\"></div>' :\n          ''\n          ) +\n      '</a>'\n  }\n\n\n  // Given an array of segments that are all in the same column, sets the backwardCoord and forwardCoord on each.\n  // Assumed the segs are already ordered.\n  // NOTE: Also reorders the given array by date!\n  computeSegHorizontals(segs: Seg[]) {\n    let levels\n    let level0\n    let i\n\n    levels = buildSlotSegLevels(segs)\n    computeForwardSlotSegs(levels)\n\n    if ((level0 = levels[0])) {\n\n      for (i = 0; i < level0.length; i++) {\n        computeSlotSegPressures(level0[i])\n      }\n\n      for (i = 0; i < level0.length; i++) {\n        this.computeSegForwardBack(level0[i], 0, 0)\n      }\n    }\n  }\n\n\n  // Calculate seg.forwardCoord and seg.backwardCoord for the segment, where both values range\n  // from 0 to 1. If the calendar is left-to-right, the seg.backwardCoord maps to \"left\" and\n  // seg.forwardCoord maps to \"right\" (via percentage). Vice-versa if the calendar is right-to-left.\n  //\n  // The segment might be part of a \"series\", which means consecutive segments with the same pressure\n  // who's width is unknown until an edge has been hit. `seriesBackwardPressure` is the number of\n  // segments behind this one in the current series, and `seriesBackwardCoord` is the starting\n  // coordinate of the first segment in the series.\n  computeSegForwardBack(seg: Seg, seriesBackwardPressure, seriesBackwardCoord) {\n    let forwardSegs = seg.forwardSegs\n    let i\n\n    if (seg.forwardCoord === undefined) { // not already computed\n\n      if (!forwardSegs.length) {\n\n        // if there are no forward segments, this segment should butt up against the edge\n        seg.forwardCoord = 1\n      } else {\n\n        // sort highest pressure first\n        this.sortForwardSegs(forwardSegs)\n\n        // this segment's forwardCoord will be calculated from the backwardCoord of the\n        // highest-pressure forward segment.\n        this.computeSegForwardBack(forwardSegs[0], seriesBackwardPressure + 1, seriesBackwardCoord)\n        seg.forwardCoord = forwardSegs[0].backwardCoord\n      }\n\n      // calculate the backwardCoord from the forwardCoord. consider the series\n      seg.backwardCoord = seg.forwardCoord -\n        (seg.forwardCoord - seriesBackwardCoord) / // available width for series\n        (seriesBackwardPressure + 1) // # of segments in the series\n\n      // use this segment's coordinates to computed the coordinates of the less-pressurized\n      // forward segments\n      for (i = 0; i < forwardSegs.length; i++) {\n        this.computeSegForwardBack(forwardSegs[i], 0, seg.forwardCoord)\n      }\n    }\n  }\n\n\n  sortForwardSegs(forwardSegs: Seg[]) {\n    let objs = forwardSegs.map(buildTimeGridSegCompareObj)\n\n    let specs = [\n      // put higher-pressure first\n      { field: 'forwardPressure', order: -1 },\n      // put segments that are closer to initial edge first (and favor ones with no coords yet)\n      { field: 'backwardCoord', order: 1 }\n    ].concat(\n      this.context.view.eventOrderSpecs\n    )\n\n    objs.sort(function(obj0, obj1) {\n      return compareByFieldSpecs(obj0, obj1, specs)\n    })\n\n    return objs.map(function(c) {\n      return c._seg\n    })\n  }\n\n\n  // Given foreground event segments that have already had their position coordinates computed,\n  // assigns position-related CSS values to their elements.\n  assignSegCss(segs: Seg[]) {\n\n    for (let seg of segs) {\n      applyStyle(seg.el, this.generateSegCss(seg))\n\n      if (seg.level > 0) {\n        seg.el.classList.add('fc-time-grid-event-inset')\n      }\n\n      // if the event is short that the title will be cut off,\n      // attach a className that condenses the title into the time area.\n      if (seg.eventRange.def.title && seg.bottom - seg.top < 30) {\n        seg.el.classList.add('fc-short') // TODO: \"condensed\" is a better name\n      }\n    }\n  }\n\n\n  // Generates an object with CSS properties/values that should be applied to an event segment element.\n  // Contains important positioning-related properties that should be applied to any event element, customized or not.\n  generateSegCss(seg: Seg) {\n    let shouldOverlap = this.context.options.slotEventOverlap\n    let backwardCoord = seg.backwardCoord // the left side if LTR. the right side if RTL. floating-point\n    let forwardCoord = seg.forwardCoord // the right side if LTR. the left side if RTL. floating-point\n    let props = this.timeGrid.generateSegVerticalCss(seg) as any // get top/bottom first\n    let isRtl = this.timeGrid.isRtl\n    let left // amount of space from left edge, a fraction of the total width\n    let right // amount of space from right edge, a fraction of the total width\n\n    if (shouldOverlap) {\n      // double the width, but don't go beyond the maximum forward coordinate (1.0)\n      forwardCoord = Math.min(1, backwardCoord + (forwardCoord - backwardCoord) * 2)\n    }\n\n    if (isRtl) {\n      left = 1 - forwardCoord\n      right = backwardCoord\n    } else {\n      left = backwardCoord\n      right = 1 - forwardCoord\n    }\n\n    props.zIndex = seg.level + 1 // convert from 0-base to 1-based\n    props.left = left * 100 + '%'\n    props.right = right * 100 + '%'\n\n    if (shouldOverlap && seg.forwardPressure) {\n      // add padding to the edge so that forward stacked events don't cover the resizer's icon\n      props[isRtl ? 'marginLeft' : 'marginRight'] = 10 * 2 // 10 is a guesstimate of the icon's width\n    }\n\n    return props\n  }\n\n}\n\n\n// Builds an array of segments \"levels\". The first level will be the leftmost tier of segments if the calendar is\n// left-to-right, or the rightmost if the calendar is right-to-left. Assumes the segments are already ordered by date.\nfunction buildSlotSegLevels(segs: Seg[]) {\n  let levels = []\n  let i\n  let seg\n  let j\n\n  for (i = 0; i < segs.length; i++) {\n    seg = segs[i]\n\n    // go through all the levels and stop on the first level where there are no collisions\n    for (j = 0; j < levels.length; j++) {\n      if (!computeSlotSegCollisions(seg, levels[j]).length) {\n        break\n      }\n    }\n\n    seg.level = j;\n\n    (levels[j] || (levels[j] = [])).push(seg)\n  }\n\n  return levels\n}\n\n\n// For every segment, figure out the other segments that are in subsequent\n// levels that also occupy the same vertical space. Accumulate in seg.forwardSegs\nfunction computeForwardSlotSegs(levels) {\n  let i\n  let level\n  let j\n  let seg\n  let k\n\n  for (i = 0; i < levels.length; i++) {\n    level = levels[i]\n\n    for (j = 0; j < level.length; j++) {\n      seg = level[j]\n\n      seg.forwardSegs = []\n      for (k = i + 1; k < levels.length; k++) {\n        computeSlotSegCollisions(seg, levels[k], seg.forwardSegs)\n      }\n    }\n  }\n}\n\n\n// Figure out which path forward (via seg.forwardSegs) results in the longest path until\n// the furthest edge is reached. The number of segments in this path will be seg.forwardPressure\nfunction computeSlotSegPressures(seg: Seg) {\n  let forwardSegs = seg.forwardSegs\n  let forwardPressure = 0\n  let i\n  let forwardSeg\n\n  if (seg.forwardPressure === undefined) { // not already computed\n\n    for (i = 0; i < forwardSegs.length; i++) {\n      forwardSeg = forwardSegs[i]\n\n      // figure out the child's maximum forward path\n      computeSlotSegPressures(forwardSeg)\n\n      // either use the existing maximum, or use the child's forward pressure\n      // plus one (for the forwardSeg itself)\n      forwardPressure = Math.max(\n        forwardPressure,\n        1 + forwardSeg.forwardPressure\n      )\n    }\n\n    seg.forwardPressure = forwardPressure\n  }\n}\n\n\n// Find all the segments in `otherSegs` that vertically collide with `seg`.\n// Append into an optionally-supplied `results` array and return.\nfunction computeSlotSegCollisions(seg: Seg, otherSegs: Seg[], results= []) {\n\n  for (let i = 0; i < otherSegs.length; i++) {\n    if (isSlotSegCollision(seg, otherSegs[i])) {\n      results.push(otherSegs[i])\n    }\n  }\n\n  return results\n}\n\n\n// Do these segments occupy the same vertical space?\nfunction isSlotSegCollision(seg1: Seg, seg2: Seg) {\n  return seg1.bottom > seg2.top && seg1.top < seg2.bottom\n}\n\n\nfunction buildTimeGridSegCompareObj(seg: Seg) {\n  let obj = buildSegCompareObj(seg)\n\n  obj.forwardPressure = seg.forwardPressure\n  obj.backwardCoord = seg.backwardCoord\n\n  return obj\n}\n","import { Seg } from '@fullcalendar/core'\nimport TimeGridEventRenderer from './TimeGridEventRenderer'\n\n\nexport default class TimeGridMirrorRenderer extends TimeGridEventRenderer {\n\n  sourceSeg: Seg\n\n  attachSegs(segs: Seg[], mirrorInfo) {\n    this.segsByCol = this.timeGrid.groupSegsByCol(segs)\n    this.timeGrid.attachSegsByCol(this.segsByCol, this.timeGrid.mirrorContainerEls)\n\n    this.sourceSeg = mirrorInfo.sourceSeg\n  }\n\n  generateSegCss(seg: Seg) {\n    let props = super.generateSegCss(seg)\n    let { sourceSeg } = this\n\n    if (sourceSeg && sourceSeg.col === seg.col) {\n      let sourceSegProps = super.generateSegCss(sourceSeg)\n\n      props.left = sourceSegProps.left\n      props.right = sourceSegProps.right\n      props.marginLeft = sourceSegProps.marginLeft\n      props.marginRight = sourceSegProps.marginRight\n    }\n\n    return props\n  }\n\n}\n","import {\n  FillRenderer, Seg\n} from '@fullcalendar/core'\nimport TimeGrid from './TimeGrid'\n\n\nexport default class TimeGridFillRenderer extends FillRenderer {\n\n  timeGrid: TimeGrid\n\n  constructor(timeGrid: TimeGrid) {\n    super(timeGrid.context)\n\n    this.timeGrid = timeGrid\n  }\n\n  attachSegs(type, segs: Seg[]) {\n    let { timeGrid } = this\n    let containerEls\n\n    // TODO: more efficient lookup\n    if (type === 'bgEvent') {\n      containerEls = timeGrid.bgContainerEls\n    } else if (type === 'businessHours') {\n      containerEls = timeGrid.businessContainerEls\n    } else if (type === 'highlight') {\n      containerEls = timeGrid.highlightContainerEls\n    }\n\n    timeGrid.attachSegsByCol(timeGrid.groupSegsByCol(segs), containerEls)\n\n    return segs.map(function(seg) {\n      return seg.el\n    })\n  }\n\n  computeSegSizes(segs: Seg[]) {\n    this.timeGrid.computeSegVerticals(segs)\n  }\n\n  assignSegSizes(segs: Seg[]) {\n    this.timeGrid.assignSegVerticals(segs)\n  }\n\n}\n","import {\n  htmlEscape,\n  htmlToElement,\n  findElements,\n  removeElement,\n  applyStyle,\n  createElement,\n  PositionCache,\n  Duration,\n  createDuration,\n  addDurations,\n  multiplyDuration,\n  wholeDivideDurations,\n  asRoughMs,\n  startOfDay,\n  DateMarker,\n  DateFormatter,\n  createFormatter,\n  formatIsoTimeString,\n  ComponentContext,\n  DateComponent,\n  Seg,\n  EventSegUiInteractionState,\n  DateProfile,\n  memoizeRendering,\n  MemoizedRendering\n} from '@fullcalendar/core'\nimport { DayBgRow } from '@fullcalendar/daygrid'\nimport TimeGridEventRenderer from './TimeGridEventRenderer'\nimport TimeGridMirrorRenderer from './TimeGridMirrorRenderer'\nimport TimeGridFillRenderer from './TimeGridFillRenderer'\n\n\n/* A component that renders one or more columns of vertical time slots\n----------------------------------------------------------------------------------------------------------------------*/\n\n// potential nice values for the slot-duration and interval-duration\n// from largest to smallest\nconst AGENDA_STOCK_SUB_DURATIONS = [\n  { hours: 1 },\n  { minutes: 30 },\n  { minutes: 15 },\n  { seconds: 30 },\n  { seconds: 15 }\n]\n\nexport interface RenderProps {\n  renderBgIntroHtml: () => string\n  renderIntroHtml: () => string\n}\n\nexport interface TimeGridSeg extends Seg {\n  col: number\n  start: DateMarker\n  end: DateMarker\n}\n\nexport interface TimeGridCell {\n  date: DateMarker\n  htmlAttrs?: string\n}\n\nexport interface TimeGridProps {\n  dateProfile: DateProfile\n  cells: TimeGridCell[]\n  businessHourSegs: TimeGridSeg[]\n  bgEventSegs: TimeGridSeg[]\n  fgEventSegs: TimeGridSeg[]\n  dateSelectionSegs: TimeGridSeg[]\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n}\n\nexport default class TimeGrid extends DateComponent<TimeGridProps> {\n\n  renderProps: RenderProps\n\n  slotDuration: Duration // duration of a \"slot\", a distinct time segment on given day, visualized by lines\n  snapDuration: Duration // granularity of time for dragging and selecting\n  snapsPerSlot: any\n  labelFormat: DateFormatter // formatting string for times running along vertical axis\n  labelInterval: Duration // duration of how often a label should be displayed for a slot\n\n  colCnt: number\n  colEls: HTMLElement[] // cells elements in the day-row background\n  slatContainerEl: HTMLElement // div that wraps all the slat rows\n  slatEls: HTMLElement[] // elements running horizontally across all columns\n  nowIndicatorEls: HTMLElement[]\n\n  colPositions: PositionCache\n  slatPositions: PositionCache\n  isSlatSizesDirty: boolean = false\n  isColSizesDirty: boolean = false\n\n  rootBgContainerEl: HTMLElement\n  bottomRuleEl: HTMLElement // hidden by default\n  contentSkeletonEl: HTMLElement\n  colContainerEls: HTMLElement[] // containers for each column\n\n  // inner-containers for each column where different types of segs live\n  fgContainerEls: HTMLElement[]\n  bgContainerEls: HTMLElement[]\n  mirrorContainerEls: HTMLElement[]\n  highlightContainerEls: HTMLElement[]\n  businessContainerEls: HTMLElement[]\n\n  private renderSlats = memoizeRendering(this._renderSlats)\n  private renderColumns: MemoizedRendering<[TimeGridCell[], DateProfile]>\n  private renderBusinessHours: MemoizedRendering<[TimeGridSeg[]]>\n  private renderDateSelection: MemoizedRendering<[TimeGridSeg[]]>\n  private renderBgEvents: MemoizedRendering<[TimeGridSeg[]]>\n  private renderFgEvents: MemoizedRendering<[TimeGridSeg[]]>\n  private renderEventSelection: MemoizedRendering<[string]>\n  private renderEventDrag: MemoizedRendering<[EventSegUiInteractionState]>\n  private renderEventResize: MemoizedRendering<[EventSegUiInteractionState]>\n\n\n  constructor(context: ComponentContext, el: HTMLElement, renderProps: RenderProps) {\n    super(context, el)\n\n    let eventRenderer = this.eventRenderer = new TimeGridEventRenderer(this)\n    let fillRenderer = this.fillRenderer = new TimeGridFillRenderer(this)\n    this.mirrorRenderer = new TimeGridMirrorRenderer(this)\n\n    let renderColumns = this.renderColumns = memoizeRendering(\n      this._renderColumns,\n      this._unrenderColumns\n    )\n\n    this.renderBusinessHours = memoizeRendering(\n      fillRenderer.renderSegs.bind(fillRenderer, 'businessHours'),\n      fillRenderer.unrender.bind(fillRenderer, 'businessHours'),\n      [ renderColumns ]\n    )\n\n    this.renderDateSelection = memoizeRendering(\n      this._renderDateSelection,\n      this._unrenderDateSelection,\n      [ renderColumns ]\n    )\n\n    this.renderFgEvents = memoizeRendering(\n      eventRenderer.renderSegs.bind(eventRenderer),\n      eventRenderer.unrender.bind(eventRenderer),\n      [ renderColumns ]\n    )\n\n    this.renderBgEvents = memoizeRendering(\n      fillRenderer.renderSegs.bind(fillRenderer, 'bgEvent'),\n      fillRenderer.unrender.bind(fillRenderer, 'bgEvent'),\n      [ renderColumns ]\n    )\n\n    this.renderEventSelection = memoizeRendering(\n      eventRenderer.selectByInstanceId.bind(eventRenderer),\n      eventRenderer.unselectByInstanceId.bind(eventRenderer),\n      [ this.renderFgEvents ]\n    )\n\n    this.renderEventDrag = memoizeRendering(\n      this._renderEventDrag,\n      this._unrenderEventDrag,\n      [ renderColumns ]\n    )\n\n    this.renderEventResize = memoizeRendering(\n      this._renderEventResize,\n      this._unrenderEventResize,\n      [ renderColumns ]\n    )\n\n    this.processOptions()\n\n    el.innerHTML =\n      '<div class=\"fc-bg\"></div>' +\n      '<div class=\"fc-slats\"></div>' +\n      '<hr class=\"fc-divider ' + this.theme.getClass('widgetHeader') + '\" style=\"display:none\" />'\n\n    this.rootBgContainerEl = el.querySelector('.fc-bg')\n    this.slatContainerEl = el.querySelector('.fc-slats')\n    this.bottomRuleEl = el.querySelector('.fc-divider')\n\n    this.renderProps = renderProps\n  }\n\n\n  /* Options\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  // Parses various options into properties of this object\n  processOptions() {\n    let slotDuration = this.opt('slotDuration')\n    let snapDuration = this.opt('snapDuration')\n    let snapsPerSlot\n    let input\n\n    slotDuration = createDuration(slotDuration)\n    snapDuration = snapDuration ? createDuration(snapDuration) : slotDuration\n    snapsPerSlot = wholeDivideDurations(slotDuration, snapDuration)\n\n    if (snapsPerSlot === null) {\n      snapDuration = slotDuration\n      snapsPerSlot = 1\n      // TODO: say warning?\n    }\n\n    this.slotDuration = slotDuration\n    this.snapDuration = snapDuration\n    this.snapsPerSlot = snapsPerSlot\n\n    // might be an array value (for TimelineView).\n    // if so, getting the most granular entry (the last one probably).\n    input = this.opt('slotLabelFormat')\n    if (Array.isArray(input)) {\n      input = input[input.length - 1]\n    }\n\n    this.labelFormat = createFormatter(input || {\n      hour: 'numeric',\n      minute: '2-digit',\n      omitZeroMinute: true,\n      meridiem: 'short'\n    })\n\n    input = this.opt('slotLabelInterval')\n    this.labelInterval = input ?\n      createDuration(input) :\n      this.computeLabelInterval(slotDuration)\n  }\n\n\n  // Computes an automatic value for slotLabelInterval\n  computeLabelInterval(slotDuration) {\n    let i\n    let labelInterval\n    let slotsPerLabel\n\n    // find the smallest stock label interval that results in more than one slots-per-label\n    for (i = AGENDA_STOCK_SUB_DURATIONS.length - 1; i >= 0; i--) {\n      labelInterval = createDuration(AGENDA_STOCK_SUB_DURATIONS[i])\n      slotsPerLabel = wholeDivideDurations(labelInterval, slotDuration)\n      if (slotsPerLabel !== null && slotsPerLabel > 1) {\n        return labelInterval\n      }\n    }\n\n    return slotDuration // fall back\n  }\n\n\n  /* Rendering\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  render(props: TimeGridProps) {\n    let cells = props.cells\n    this.colCnt = cells.length\n\n    this.renderSlats(props.dateProfile)\n    this.renderColumns(props.cells, props.dateProfile)\n    this.renderBusinessHours(props.businessHourSegs)\n    this.renderDateSelection(props.dateSelectionSegs)\n    this.renderFgEvents(props.fgEventSegs)\n    this.renderBgEvents(props.bgEventSegs)\n    this.renderEventSelection(props.eventSelection)\n    this.renderEventDrag(props.eventDrag)\n    this.renderEventResize(props.eventResize)\n  }\n\n\n  destroy() {\n    super.destroy()\n\n    // should unrender everything else too\n    this.renderSlats.unrender()\n    this.renderColumns.unrender()\n  }\n\n\n  updateSize(isResize: boolean) {\n    let { fillRenderer, eventRenderer, mirrorRenderer } = this\n\n    if (isResize || this.isSlatSizesDirty) {\n      this.buildSlatPositions()\n      this.isSlatSizesDirty = false\n    }\n\n    if (isResize || this.isColSizesDirty) {\n      this.buildColPositions()\n      this.isColSizesDirty = false\n    }\n\n    fillRenderer.computeSizes(isResize)\n    eventRenderer.computeSizes(isResize)\n    mirrorRenderer.computeSizes(isResize)\n\n    fillRenderer.assignSizes(isResize)\n    eventRenderer.assignSizes(isResize)\n    mirrorRenderer.assignSizes(isResize)\n  }\n\n\n  _renderSlats(dateProfile: DateProfile) {\n    let { theme } = this\n\n    this.slatContainerEl.innerHTML =\n      '<table class=\"' + theme.getClass('tableGrid') + '\">' +\n        this.renderSlatRowHtml(dateProfile) +\n      '</table>'\n\n    this.slatEls = findElements(this.slatContainerEl, 'tr')\n\n    this.slatPositions = new PositionCache(\n      this.el,\n      this.slatEls,\n      false,\n      true // vertical\n    )\n\n    this.isSlatSizesDirty = true\n  }\n\n\n  // Generates the HTML for the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n  renderSlatRowHtml(dateProfile: DateProfile) {\n    let { dateEnv, theme, isRtl } = this\n    let html = ''\n    let dayStart = startOfDay(dateProfile.renderRange.start)\n    let slotTime = dateProfile.minTime\n    let slotIterator = createDuration(0)\n    let slotDate // will be on the view's first day, but we only care about its time\n    let isLabeled\n    let axisHtml\n\n    // Calculate the time for each slot\n    while (asRoughMs(slotTime) < asRoughMs(dateProfile.maxTime)) {\n      slotDate = dateEnv.add(dayStart, slotTime)\n      isLabeled = wholeDivideDurations(slotIterator, this.labelInterval) !== null\n\n      axisHtml =\n        '<td class=\"fc-axis fc-time ' + theme.getClass('widgetContent') + '\">' +\n          (isLabeled ?\n            '<span>' + // for matchCellWidths\n              htmlEscape(dateEnv.format(slotDate, this.labelFormat)) +\n            '</span>' :\n            ''\n            ) +\n        '</td>'\n\n      html +=\n        '<tr data-time=\"' + formatIsoTimeString(slotDate) + '\"' +\n          (isLabeled ? '' : ' class=\"fc-minor\"') +\n          '>' +\n          (!isRtl ? axisHtml : '') +\n          '<td class=\"' + theme.getClass('widgetContent') + '\"></td>' +\n          (isRtl ? axisHtml : '') +\n        '</tr>'\n\n      slotTime = addDurations(slotTime, this.slotDuration)\n      slotIterator = addDurations(slotIterator, this.slotDuration)\n    }\n\n    return html\n  }\n\n\n  _renderColumns(cells: TimeGridCell[], dateProfile: DateProfile) {\n    let { theme, dateEnv, view } = this\n\n    let bgRow = new DayBgRow(this.context)\n    this.rootBgContainerEl.innerHTML =\n      '<table class=\"' + theme.getClass('tableGrid') + '\">' +\n        bgRow.renderHtml({\n          cells,\n          dateProfile,\n          renderIntroHtml: this.renderProps.renderBgIntroHtml\n        }) +\n      '</table>'\n\n    this.colEls = findElements(this.el, '.fc-day, .fc-disabled-day')\n\n    for (let col = 0; col < this.colCnt; col++) {\n      this.publiclyTrigger('dayRender', [\n        {\n          date: dateEnv.toDate(cells[col].date),\n          el: this.colEls[col],\n          view\n        }\n      ])\n    }\n\n    if (this.isRtl) {\n      this.colEls.reverse()\n    }\n\n    this.colPositions = new PositionCache(\n      this.el,\n      this.colEls,\n      true, // horizontal\n      false\n    )\n\n    this.renderContentSkeleton()\n    this.isColSizesDirty = true\n  }\n\n\n  _unrenderColumns() {\n    this.unrenderContentSkeleton()\n  }\n\n\n  /* Content Skeleton\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  // Renders the DOM that the view's content will live in\n  renderContentSkeleton() {\n    let parts = []\n    let skeletonEl: HTMLElement\n\n    parts.push(\n      this.renderProps.renderIntroHtml()\n    )\n\n    for (let i = 0; i < this.colCnt; i++) {\n      parts.push(\n        '<td>' +\n          '<div class=\"fc-content-col\">' +\n            '<div class=\"fc-event-container fc-mirror-container\"></div>' +\n            '<div class=\"fc-event-container\"></div>' +\n            '<div class=\"fc-highlight-container\"></div>' +\n            '<div class=\"fc-bgevent-container\"></div>' +\n            '<div class=\"fc-business-container\"></div>' +\n          '</div>' +\n        '</td>'\n      )\n    }\n\n    if (this.isRtl) {\n      parts.reverse()\n    }\n\n    skeletonEl = this.contentSkeletonEl = htmlToElement(\n      '<div class=\"fc-content-skeleton\">' +\n        '<table>' +\n          '<tr>' + parts.join('') + '</tr>' +\n        '</table>' +\n      '</div>'\n    )\n\n    this.colContainerEls = findElements(skeletonEl, '.fc-content-col')\n    this.mirrorContainerEls = findElements(skeletonEl, '.fc-mirror-container')\n    this.fgContainerEls = findElements(skeletonEl, '.fc-event-container:not(.fc-mirror-container)')\n    this.bgContainerEls = findElements(skeletonEl, '.fc-bgevent-container')\n    this.highlightContainerEls = findElements(skeletonEl, '.fc-highlight-container')\n    this.businessContainerEls = findElements(skeletonEl, '.fc-business-container')\n\n    if (this.isRtl) {\n      this.colContainerEls.reverse()\n      this.mirrorContainerEls.reverse()\n      this.fgContainerEls.reverse()\n      this.bgContainerEls.reverse()\n      this.highlightContainerEls.reverse()\n      this.businessContainerEls.reverse()\n    }\n\n    this.el.appendChild(skeletonEl)\n  }\n\n\n  unrenderContentSkeleton() {\n    removeElement(this.contentSkeletonEl)\n  }\n\n\n  // Given a flat array of segments, return an array of sub-arrays, grouped by each segment's col\n  groupSegsByCol(segs) {\n    let segsByCol = []\n    let i\n\n    for (i = 0; i < this.colCnt; i++) {\n      segsByCol.push([])\n    }\n\n    for (i = 0; i < segs.length; i++) {\n      segsByCol[segs[i].col].push(segs[i])\n    }\n\n    return segsByCol\n  }\n\n\n  // Given segments grouped by column, insert the segments' elements into a parallel array of container\n  // elements, each living within a column.\n  attachSegsByCol(segsByCol, containerEls: HTMLElement[]) {\n    let col\n    let segs\n    let i\n\n    for (col = 0; col < this.colCnt; col++) { // iterate each column grouping\n      segs = segsByCol[col]\n\n      for (i = 0; i < segs.length; i++) {\n        containerEls[col].appendChild(segs[i].el)\n      }\n    }\n  }\n\n\n  /* Now Indicator\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  getNowIndicatorUnit() {\n    return 'minute' // will refresh on the minute\n  }\n\n\n  renderNowIndicator(segs: TimeGridSeg[], date) {\n\n    // HACK: if date columns not ready for some reason (scheduler)\n    if (!this.colContainerEls) {\n      return\n    }\n\n    let top = this.computeDateTop(date)\n    let nodes = []\n    let i\n\n    // render lines within the columns\n    for (i = 0; i < segs.length; i++) {\n      let lineEl = createElement('div', { className: 'fc-now-indicator fc-now-indicator-line' })\n      lineEl.style.top = top + 'px'\n      this.colContainerEls[segs[i].col].appendChild(lineEl)\n      nodes.push(lineEl)\n    }\n\n    // render an arrow over the axis\n    if (segs.length > 0) { // is the current time in view?\n      let arrowEl = createElement('div', { className: 'fc-now-indicator fc-now-indicator-arrow' })\n      arrowEl.style.top = top + 'px'\n      this.contentSkeletonEl.appendChild(arrowEl)\n      nodes.push(arrowEl)\n    }\n\n    this.nowIndicatorEls = nodes\n  }\n\n\n  unrenderNowIndicator() {\n    if (this.nowIndicatorEls) {\n      this.nowIndicatorEls.forEach(removeElement)\n      this.nowIndicatorEls = null\n    }\n  }\n\n\n  /* Coordinates\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  getTotalSlatHeight() {\n    return this.slatContainerEl.getBoundingClientRect().height\n  }\n\n\n  // Computes the top coordinate, relative to the bounds of the grid, of the given date.\n  // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n  computeDateTop(when: DateMarker, startOfDayDate?: DateMarker) {\n    if (!startOfDayDate) {\n      startOfDayDate = startOfDay(when)\n    }\n    return this.computeTimeTop(createDuration(when.valueOf() - startOfDayDate.valueOf()))\n  }\n\n\n  // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n  computeTimeTop(duration: Duration) {\n    let len = this.slatEls.length\n    let dateProfile = this.props.dateProfile\n    let slatCoverage = (duration.milliseconds - asRoughMs(dateProfile.minTime)) / asRoughMs(this.slotDuration) // floating-point value of # of slots covered\n    let slatIndex\n    let slatRemainder\n\n    // compute a floating-point number for how many slats should be progressed through.\n    // from 0 to number of slats (inclusive)\n    // constrained because minTime/maxTime might be customized.\n    slatCoverage = Math.max(0, slatCoverage)\n    slatCoverage = Math.min(len, slatCoverage)\n\n    // an integer index of the furthest whole slat\n    // from 0 to number slats (*exclusive*, so len-1)\n    slatIndex = Math.floor(slatCoverage)\n    slatIndex = Math.min(slatIndex, len - 1)\n\n    // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n    // could be 1.0 if slatCoverage is covering *all* the slots\n    slatRemainder = slatCoverage - slatIndex\n\n    return this.slatPositions.tops[slatIndex] +\n      this.slatPositions.getHeight(slatIndex) * slatRemainder\n  }\n\n\n  // For each segment in an array, computes and assigns its top and bottom properties\n  computeSegVerticals(segs) {\n    let eventMinHeight = this.opt('timeGridEventMinHeight')\n    let i\n    let seg\n    let dayDate\n\n    for (i = 0; i < segs.length; i++) {\n      seg = segs[i]\n      dayDate = this.props.cells[seg.col].date\n\n      seg.top = this.computeDateTop(seg.start, dayDate)\n      seg.bottom = Math.max(\n        seg.top + eventMinHeight,\n        this.computeDateTop(seg.end, dayDate)\n      )\n    }\n  }\n\n\n  // Given segments that already have their top/bottom properties computed, applies those values to\n  // the segments' elements.\n  assignSegVerticals(segs) {\n    let i\n    let seg\n\n    for (i = 0; i < segs.length; i++) {\n      seg = segs[i]\n      applyStyle(seg.el, this.generateSegVerticalCss(seg))\n    }\n  }\n\n\n  // Generates an object with CSS properties for the top/bottom coordinates of a segment element\n  generateSegVerticalCss(seg) {\n    return {\n      top: seg.top,\n      bottom: -seg.bottom // flipped because needs to be space beyond bottom edge of event container\n    }\n  }\n\n\n  /* Sizing\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  buildPositionCaches() {\n    this.buildColPositions()\n    this.buildSlatPositions()\n  }\n\n\n  buildColPositions() {\n    this.colPositions.build()\n  }\n\n\n  buildSlatPositions() {\n    this.slatPositions.build()\n  }\n\n\n  /* Hit System\n  ------------------------------------------------------------------------------------------------------------------*/\n\n  positionToHit(positionLeft, positionTop) {\n    let { dateEnv, snapsPerSlot, slatPositions, colPositions } = this\n\n    let colIndex = colPositions.leftToIndex(positionLeft)\n    let slatIndex = slatPositions.topToIndex(positionTop)\n\n    if (colIndex != null && slatIndex != null) {\n      let slatTop = slatPositions.tops[slatIndex]\n      let slatHeight = slatPositions.getHeight(slatIndex)\n      let partial = (positionTop - slatTop) / slatHeight // floating point number between 0 and 1\n      let localSnapIndex = Math.floor(partial * snapsPerSlot) // the snap # relative to start of slat\n      let snapIndex = slatIndex * snapsPerSlot + localSnapIndex\n\n      let dayDate = this.props.cells[colIndex].date\n      let time = addDurations(\n        this.props.dateProfile.minTime,\n        multiplyDuration(this.snapDuration, snapIndex)\n      )\n\n      let start = dateEnv.add(dayDate, time)\n      let end = dateEnv.add(start, this.snapDuration)\n\n      return {\n        col: colIndex,\n        dateSpan: {\n          range: { start, end },\n          allDay: false\n        },\n        dayEl: this.colEls[colIndex],\n        relativeRect: {\n          left: colPositions.lefts[colIndex],\n          right: colPositions.rights[colIndex],\n          top: slatTop,\n          bottom: slatTop + slatHeight\n        }\n      }\n    }\n  }\n\n\n  /* Event Drag Visualization\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  _renderEventDrag(state: EventSegUiInteractionState) {\n    if (state) {\n      this.eventRenderer.hideByHash(state.affectedInstances)\n\n      if (state.isEvent) {\n        this.mirrorRenderer.renderSegs(state.segs, { isDragging: true, sourceSeg: state.sourceSeg })\n      } else {\n        this.fillRenderer.renderSegs('highlight', state.segs)\n      }\n    }\n  }\n\n\n  _unrenderEventDrag(state: EventSegUiInteractionState) {\n    if (state) {\n      this.eventRenderer.showByHash(state.affectedInstances)\n      this.mirrorRenderer.unrender(state.segs, { isDragging: true, sourceSeg: state.sourceSeg })\n      this.fillRenderer.unrender('highlight')\n    }\n  }\n\n\n  /* Event Resize Visualization\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  _renderEventResize(state: EventSegUiInteractionState) {\n    if (state) {\n      this.eventRenderer.hideByHash(state.affectedInstances)\n      this.mirrorRenderer.renderSegs(state.segs, { isResizing: true, sourceSeg: state.sourceSeg })\n    }\n  }\n\n\n  _unrenderEventResize(state: EventSegUiInteractionState) {\n    if (state) {\n      this.eventRenderer.showByHash(state.affectedInstances)\n      this.mirrorRenderer.unrender(state.segs, { isResizing: true, sourceSeg: state.sourceSeg })\n    }\n  }\n\n\n  /* Selection\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  // Renders a visual indication of a selection. Overrides the default, which was to simply render a highlight.\n  _renderDateSelection(segs: Seg[]) {\n    if (segs) {\n      if (this.opt('selectMirror')) {\n        this.mirrorRenderer.renderSegs(segs, { isSelecting: true })\n      } else {\n        this.fillRenderer.renderSegs('highlight', segs)\n      }\n    }\n  }\n\n\n  _unrenderDateSelection(segs: Seg[]) {\n    this.mirrorRenderer.unrender(segs, { isSelecting: true })\n    this.fillRenderer.unrender('highlight')\n  }\n\n}\n","import {\n  Splitter,\n  hasBgRendering,\n  EventDef,\n  DateSpan\n} from '@fullcalendar/core'\n\nexport default class AllDaySplitter extends Splitter {\n\n  getKeyInfo() {\n    return {\n      allDay: {},\n      timed: {}\n    }\n  }\n\n  getKeysForDateSpan(dateSpan: DateSpan): string[] {\n    if (dateSpan.allDay) {\n      return [ 'allDay' ]\n    } else {\n      return [ 'timed' ]\n    }\n  }\n\n  getKeysForEventDef(eventDef: EventDef): string[] {\n    if (!eventDef.allDay) {\n      return [ 'timed' ]\n    } else if (hasBgRendering(eventDef)) {\n      return [ 'timed', 'allDay' ]\n    } else {\n      return [ 'allDay' ]\n    }\n  }\n\n}\n","import {\n  findElements, createElement, htmlEscape,\n  matchCellWidths, uncompensateScroll, compensateScroll, subtractInnerElHeight,\n  ScrollComponent,\n  View, ViewSpec, DateProfileGenerator,\n  ComponentContext,\n  createFormatter, diffDays,\n  buildGotoAnchorHtml, getAllDayHtml, Duration\n} from '@fullcalendar/core'\nimport { DayGrid } from '@fullcalendar/daygrid'\nimport TimeGrid from './TimeGrid'\nimport AllDaySplitter from './AllDaySplitter'\n\nconst TIMEGRID_ALL_DAY_EVENT_LIMIT = 5\nconst WEEK_HEADER_FORMAT = createFormatter({ week: 'short' })\n\n\n/* An abstract class for all timegrid-related views. Displays one more columns with time slots running vertically.\n----------------------------------------------------------------------------------------------------------------------*/\n// Is a manager for the TimeGrid subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).\n// Responsible for managing width/height.\n\nexport default abstract class TimeGridView extends View {\n\n  timeGrid: TimeGrid // the main time-grid subcomponent of this view\n  dayGrid: DayGrid // the \"all-day\" subcomponent. if all-day is turned off, this will be null\n\n  scroller: ScrollComponent\n  axisWidth: any // the width of the time axis running down the side\n\n  protected splitter = new AllDaySplitter()\n\n\n  constructor(\n    context: ComponentContext,\n    viewSpec: ViewSpec,\n    dateProfileGenerator: DateProfileGenerator,\n    parentEl: HTMLElement\n  ) {\n    super(context, viewSpec, dateProfileGenerator, parentEl)\n\n    this.el.classList.add('fc-timeGrid-view')\n    this.el.innerHTML = this.renderSkeletonHtml()\n\n    this.scroller = new ScrollComponent(\n      'hidden', // overflow x\n      'auto' // overflow y\n    )\n\n    let timeGridWrapEl = this.scroller.el\n    this.el.querySelector('.fc-body > tr > td').appendChild(timeGridWrapEl)\n    timeGridWrapEl.classList.add('fc-time-grid-container')\n    let timeGridEl = createElement('div', { className: 'fc-time-grid' })\n    timeGridWrapEl.appendChild(timeGridEl)\n\n    this.timeGrid = new TimeGrid(\n      this.context,\n      timeGridEl,\n      {\n        renderBgIntroHtml: this.renderTimeGridBgIntroHtml,\n        renderIntroHtml: this.renderTimeGridIntroHtml\n      }\n    )\n\n    if (this.opt('allDaySlot')) { // should we display the \"all-day\" area?\n\n      this.dayGrid = new DayGrid( // the all-day subcomponent of this view\n        this.context,\n        this.el.querySelector('.fc-day-grid'),\n        {\n          renderNumberIntroHtml: this.renderDayGridIntroHtml, // don't want numbers\n          renderBgIntroHtml: this.renderDayGridBgIntroHtml,\n          renderIntroHtml: this.renderDayGridIntroHtml,\n          colWeekNumbersVisible: false,\n          cellWeekNumbersVisible: false\n        }\n      )\n\n      // have the day-grid extend it's coordinate area over the <hr> dividing the two grids\n      let dividerEl = this.el.querySelector('.fc-divider') as HTMLElement\n      this.dayGrid.bottomCoordPadding = dividerEl.getBoundingClientRect().height\n    }\n  }\n\n\n  destroy() {\n    super.destroy()\n\n    this.timeGrid.destroy()\n\n    if (this.dayGrid) {\n      this.dayGrid.destroy()\n    }\n\n    this.scroller.destroy()\n  }\n\n\n  /* Rendering\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  // Builds the HTML skeleton for the view.\n  // The day-grid and time-grid components will render inside containers defined by this HTML.\n  renderSkeletonHtml() {\n    let { theme } = this\n\n    return '' +\n      '<table class=\"' + theme.getClass('tableGrid') + '\">' +\n        (this.opt('columnHeader') ?\n          '<thead class=\"fc-head\">' +\n            '<tr>' +\n              '<td class=\"fc-head-container ' + theme.getClass('widgetHeader') + '\">&nbsp;</td>' +\n            '</tr>' +\n          '</thead>' :\n          ''\n          ) +\n        '<tbody class=\"fc-body\">' +\n          '<tr>' +\n            '<td class=\"' + theme.getClass('widgetContent') + '\">' +\n              (this.opt('allDaySlot') ?\n                '<div class=\"fc-day-grid\"></div>' +\n                '<hr class=\"fc-divider ' + theme.getClass('widgetHeader') + '\" />' :\n                ''\n                ) +\n            '</td>' +\n          '</tr>' +\n        '</tbody>' +\n      '</table>'\n  }\n\n\n  /* Now Indicator\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  getNowIndicatorUnit() {\n    return this.timeGrid.getNowIndicatorUnit()\n  }\n\n\n  // subclasses should implement\n  // renderNowIndicator(date: DateMarker) {\n  // }\n\n\n  unrenderNowIndicator() {\n    this.timeGrid.unrenderNowIndicator()\n  }\n\n\n  /* Dimensions\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  updateSize(isResize: boolean, viewHeight: number, isAuto: boolean) {\n    super.updateSize(isResize, viewHeight, isAuto) // will call updateBaseSize. important that executes first\n\n    this.timeGrid.updateSize(isResize)\n\n    if (this.dayGrid) {\n      this.dayGrid.updateSize(isResize)\n    }\n  }\n\n\n  // Adjusts the vertical dimensions of the view to the specified values\n  updateBaseSize(isResize, viewHeight, isAuto) {\n    let eventLimit\n    let scrollerHeight\n    let scrollbarWidths\n\n    // make all axis cells line up\n    this.axisWidth = matchCellWidths(findElements(this.el, '.fc-axis'))\n\n    // hack to give the view some height prior to timeGrid's columns being rendered\n    // TODO: separate setting height from scroller VS timeGrid.\n    if (!this.timeGrid.colEls) {\n      if (!isAuto) {\n        scrollerHeight = this.computeScrollerHeight(viewHeight)\n        this.scroller.setHeight(scrollerHeight)\n      }\n      return\n    }\n\n    // set of fake row elements that must compensate when scroller has scrollbars\n    let noScrollRowEls: HTMLElement[] = findElements(this.el, '.fc-row').filter((node) => {\n      return !this.scroller.el.contains(node)\n    })\n\n    // reset all dimensions back to the original state\n    this.timeGrid.bottomRuleEl.style.display = 'none' // will be shown later if this <hr> is necessary\n    this.scroller.clear() // sets height to 'auto' and clears overflow\n    noScrollRowEls.forEach(uncompensateScroll)\n\n    // limit number of events in the all-day area\n    if (this.dayGrid) {\n      this.dayGrid.removeSegPopover() // kill the \"more\" popover if displayed\n\n      eventLimit = this.opt('eventLimit')\n      if (eventLimit && typeof eventLimit !== 'number') {\n        eventLimit = TIMEGRID_ALL_DAY_EVENT_LIMIT // make sure \"auto\" goes to a real number\n      }\n      if (eventLimit) {\n        this.dayGrid.limitRows(eventLimit)\n      }\n    }\n\n    if (!isAuto) { // should we force dimensions of the scroll container?\n\n      scrollerHeight = this.computeScrollerHeight(viewHeight)\n      this.scroller.setHeight(scrollerHeight)\n      scrollbarWidths = this.scroller.getScrollbarWidths()\n\n      if (scrollbarWidths.left || scrollbarWidths.right) { // using scrollbars?\n\n        // make the all-day and header rows lines up\n        noScrollRowEls.forEach(function(rowEl) {\n          compensateScroll(rowEl, scrollbarWidths)\n        })\n\n        // the scrollbar compensation might have changed text flow, which might affect height, so recalculate\n        // and reapply the desired height to the scroller.\n        scrollerHeight = this.computeScrollerHeight(viewHeight)\n        this.scroller.setHeight(scrollerHeight)\n      }\n\n      // guarantees the same scrollbar widths\n      this.scroller.lockOverflow(scrollbarWidths)\n\n      // if there's any space below the slats, show the horizontal rule.\n      // this won't cause any new overflow, because lockOverflow already called.\n      if (this.timeGrid.getTotalSlatHeight() < scrollerHeight) {\n        this.timeGrid.bottomRuleEl.style.display = ''\n      }\n    }\n  }\n\n\n  // given a desired total height of the view, returns what the height of the scroller should be\n  computeScrollerHeight(viewHeight) {\n    return viewHeight -\n      subtractInnerElHeight(this.el, this.scroller.el) // everything that's NOT the scroller\n  }\n\n\n  /* Scroll\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  // Computes the initial pre-configured scroll state prior to allowing the user to change it\n  computeDateScroll(duration: Duration) {\n    let top = this.timeGrid.computeTimeTop(duration)\n\n    // zoom can give weird floating-point values. rather scroll a little bit further\n    top = Math.ceil(top)\n\n    if (top) {\n      top++ // to overcome top border that slots beyond the first have. looks better\n    }\n\n    return { top }\n  }\n\n\n  queryDateScroll() {\n    return { top: this.scroller.getScrollTop() }\n  }\n\n\n  applyDateScroll(scroll) {\n    if (scroll.top !== undefined) {\n      this.scroller.setScrollTop(scroll.top)\n    }\n  }\n\n\n  /* Header Render Methods\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  // Generates the HTML that will go before the day-of week header cells\n  renderHeadIntroHtml = () => {\n    let { theme, dateEnv } = this\n    let range = this.props.dateProfile.renderRange\n    let dayCnt = diffDays(range.start, range.end)\n    let weekText\n\n    if (this.opt('weekNumbers')) {\n      weekText = dateEnv.format(range.start, WEEK_HEADER_FORMAT)\n\n      return '' +\n        '<th class=\"fc-axis fc-week-number ' + theme.getClass('widgetHeader') + '\" ' + this.axisStyleAttr() + '>' +\n          buildGotoAnchorHtml( // aside from link, important for matchCellWidths\n            this,\n            { date: range.start, type: 'week', forceOff: dayCnt > 1 },\n            htmlEscape(weekText) // inner HTML\n          ) +\n        '</th>'\n    } else {\n      return '<th class=\"fc-axis ' + theme.getClass('widgetHeader') + '\" ' + this.axisStyleAttr() + '></th>'\n    }\n  }\n\n\n  // Generates an HTML attribute string for setting the width of the axis, if it is known\n  axisStyleAttr() {\n    if (this.axisWidth != null) {\n      return 'style=\"width:' + this.axisWidth + 'px\"'\n    }\n    return ''\n  }\n\n\n  /* Time Grid Render Methods\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  // Generates the HTML that goes before the bg of the TimeGrid slot area. Long vertical column.\n  renderTimeGridBgIntroHtml = () => {\n    let { theme } = this\n\n    return '<td class=\"fc-axis ' + theme.getClass('widgetContent') + '\" ' + this.axisStyleAttr() + '></td>'\n  }\n\n\n  // Generates the HTML that goes before all other types of cells.\n  // Affects content-skeleton, mirror-skeleton, highlight-skeleton for both the time-grid and day-grid.\n  renderTimeGridIntroHtml = () => {\n    return '<td class=\"fc-axis\" ' + this.axisStyleAttr() + '></td>'\n  }\n\n\n  /* Day Grid Render Methods\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  // Generates the HTML that goes before the all-day cells\n  renderDayGridBgIntroHtml = () => {\n    let { theme } = this\n\n    return '' +\n      '<td class=\"fc-axis ' + theme.getClass('widgetContent') + '\" ' + this.axisStyleAttr() + '>' +\n        '<span>' + // needed for matchCellWidths\n          getAllDayHtml(this) +\n        '</span>' +\n      '</td>'\n  }\n\n\n  // Generates the HTML that goes before all other types of cells.\n  // Affects content-skeleton, mirror-skeleton, highlight-skeleton for both the time-grid and day-grid.\n  renderDayGridIntroHtml = () => {\n    return '<td class=\"fc-axis\" ' + this.axisStyleAttr() + '></td>'\n  }\n\n}\n\nTimeGridView.prototype.usesMinMaxTime = true // indicates that minTime/maxTime affects rendering\n","import {\n  DateComponent,\n  DateProfile,\n  EventStore,\n  EventUiHash,\n  EventInteractionState,\n  DateSpan,\n  memoize,\n  intersectRanges, DateRange,\n  DayTable,\n  DateEnv,\n  DateMarker,\n  Slicer,\n  Hit,\n  ComponentContext\n} from '@fullcalendar/core'\nimport TimeGrid, { TimeGridSeg } from './TimeGrid'\n\nexport interface SimpleTimeGridProps {\n  dateProfile: DateProfile | null\n  dayTable: DayTable\n  businessHours: EventStore\n  eventStore: EventStore\n  eventUiBases: EventUiHash\n  dateSelection: DateSpan | null\n  eventSelection: string\n  eventDrag: EventInteractionState | null\n  eventResize: EventInteractionState | null\n}\n\nexport default class SimpleTimeGrid extends DateComponent<SimpleTimeGridProps> {\n\n  timeGrid: TimeGrid\n\n  private buildDayRanges = memoize(buildDayRanges)\n  private dayRanges: DateRange[] // for now indicator\n  private slicer = new TimeGridSlicer()\n\n  constructor(context: ComponentContext, timeGrid: TimeGrid) {\n    super(context, timeGrid.el)\n\n    this.timeGrid = timeGrid\n\n    context.calendar.registerInteractiveComponent(this, {\n      el: this.timeGrid.el\n    })\n  }\n\n  destroy() {\n    super.destroy()\n\n    this.calendar.unregisterInteractiveComponent(this)\n  }\n\n  render(props: SimpleTimeGridProps) {\n    let { dateProfile, dayTable } = props\n    let dayRanges = this.dayRanges = this.buildDayRanges(dayTable, dateProfile, this.dateEnv)\n\n    this.timeGrid.receiveProps({\n      ...this.slicer.sliceProps(props, dateProfile, null, this.timeGrid, dayRanges),\n      dateProfile,\n      cells: dayTable.cells[0]\n    })\n  }\n\n  renderNowIndicator(date: DateMarker) {\n    this.timeGrid.renderNowIndicator(\n      this.slicer.sliceNowDate(date, this.timeGrid, this.dayRanges),\n      date\n    )\n  }\n\n  buildPositionCaches() {\n    this.timeGrid.buildPositionCaches()\n  }\n\n  queryHit(positionLeft: number, positionTop: number): Hit {\n    let rawHit = this.timeGrid.positionToHit(positionLeft, positionTop)\n\n    if (rawHit) {\n      return {\n        component: this.timeGrid,\n        dateSpan: rawHit.dateSpan,\n        dayEl: rawHit.dayEl,\n        rect: {\n          left: rawHit.relativeRect.left,\n          right: rawHit.relativeRect.right,\n          top: rawHit.relativeRect.top,\n          bottom: rawHit.relativeRect.bottom\n        },\n        layer: 0\n      }\n    }\n  }\n\n}\n\n\nexport function buildDayRanges(dayTable: DayTable, dateProfile: DateProfile, dateEnv: DateEnv): DateRange[] {\n  let ranges: DateRange[] = []\n\n  for (let date of dayTable.headerDates) {\n    ranges.push({\n      start: dateEnv.add(date, dateProfile.minTime),\n      end: dateEnv.add(date, dateProfile.maxTime)\n    })\n  }\n\n  return ranges\n}\n\n\nexport class TimeGridSlicer extends Slicer<TimeGridSeg, [DateRange[]]> {\n\n  sliceRange(range: DateRange, dayRanges: DateRange[]): TimeGridSeg[] {\n    let segs: TimeGridSeg[] = []\n\n    for (let col = 0; col < dayRanges.length; col++) {\n      let segRange = intersectRanges(range, dayRanges[col])\n\n      if (segRange) {\n        segs.push({\n          start: segRange.start,\n          end: segRange.end,\n          isStart: segRange.start.valueOf() === range.start.valueOf(),\n          isEnd: segRange.end.valueOf() === range.end.valueOf(),\n          col\n        })\n      }\n    }\n\n    return segs\n  }\n\n}\n","import {\n  DateProfileGenerator, DateProfile,\n  ComponentContext,\n  ViewSpec,\n  DayHeader,\n  DaySeries,\n  DayTable,\n  memoize,\n  ViewProps\n} from '@fullcalendar/core'\nimport { SimpleDayGrid } from '@fullcalendar/daygrid'\nimport SimpleTimeGrid from './SimpleTimeGrid'\nimport AbstractTimeGridView from './AbstractTimeGridView'\n\n\nexport default class TimeGridView extends AbstractTimeGridView {\n\n  header: DayHeader\n  simpleDayGrid: SimpleDayGrid\n  simpleTimeGrid: SimpleTimeGrid\n\n  private buildDayTable = memoize(buildDayTable)\n\n  constructor(\n    _context: ComponentContext,\n    viewSpec: ViewSpec,\n    dateProfileGenerator: DateProfileGenerator,\n    parentEl: HTMLElement\n  ) {\n    super(_context, viewSpec, dateProfileGenerator, parentEl)\n\n    if (this.opt('columnHeader')) {\n      this.header = new DayHeader(\n        this.context,\n        this.el.querySelector('.fc-head-container')\n      )\n    }\n\n    this.simpleTimeGrid = new SimpleTimeGrid(this.context, this.timeGrid)\n\n    if (this.dayGrid) {\n      this.simpleDayGrid = new SimpleDayGrid(this.context, this.dayGrid)\n    }\n  }\n\n  destroy() {\n    super.destroy()\n\n    if (this.header) {\n      this.header.destroy()\n    }\n\n    this.simpleTimeGrid.destroy()\n\n    if (this.simpleDayGrid) {\n      this.simpleDayGrid.destroy()\n    }\n  }\n\n  render(props: ViewProps) {\n    super.render(props) // for flags for updateSize\n\n    let { dateProfile } = this.props\n    let dayTable = this.buildDayTable(dateProfile, this.dateProfileGenerator)\n    let splitProps = this.splitter.splitProps(props)\n\n    if (this.header) {\n      this.header.receiveProps({\n        dateProfile,\n        dates: dayTable.headerDates,\n        datesRepDistinctDays: true,\n        renderIntroHtml: this.renderHeadIntroHtml\n      })\n    }\n\n    this.simpleTimeGrid.receiveProps({\n      ...splitProps['timed'],\n      dateProfile,\n      dayTable\n    })\n\n    if (this.simpleDayGrid) {\n      this.simpleDayGrid.receiveProps({\n        ...splitProps['allDay'],\n        dateProfile,\n        dayTable,\n        nextDayThreshold: this.nextDayThreshold,\n        isRigid: false\n      })\n    }\n  }\n\n  renderNowIndicator(date) {\n    this.simpleTimeGrid.renderNowIndicator(date)\n  }\n\n}\n\nexport function buildDayTable(dateProfile: DateProfile, dateProfileGenerator: DateProfileGenerator): DayTable {\n  let daySeries = new DaySeries(dateProfile.renderRange, dateProfileGenerator)\n\n  return new DayTable(daySeries, false)\n}\n","import { createPlugin } from '@fullcalendar/core'\nimport AbstractTimeGridView from './AbstractTimeGridView'\nimport TimeGridView, { buildDayTable } from './TimeGridView'\nimport { TimeGridSeg } from './TimeGrid'\nimport { TimeGridSlicer, buildDayRanges } from './SimpleTimeGrid'\n\nexport { TimeGridView, AbstractTimeGridView, buildDayTable, buildDayRanges, TimeGridSlicer, TimeGridSeg }\nexport { default as TimeGrid } from './TimeGrid'\n\nexport default createPlugin({\n  defaultView: 'timeGridWeek',\n  views: {\n\n    timeGrid: {\n      class: TimeGridView,\n      allDaySlot: true,\n      slotDuration: '00:30:00',\n      slotEventOverlap: true // a bad name. confused with overlap/constraint system\n    },\n\n    timeGridDay: {\n      type: 'timeGrid',\n      duration: { days: 1 }\n    },\n\n    timeGridWeek: {\n      type: 'timeGrid',\n      duration: { weeks: 1 }\n    }\n\n  }\n})\n"],"names":["tslib_1.__extends","AbstractTimeGridView","TimeGridView"],"mappings":"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"}