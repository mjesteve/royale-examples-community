<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.apache.royale.community</groupId>
    <artifactId>royale-examples-community</artifactId>
    <version>1.0.0-SNAPSHOT</version>
  </parent>

  <artifactId>royalelibs</artifactId>
  <packaging>pom</packaging>

  <name>Royale Libs</name>

  <modules>
    <!--
    <module>royale-js-year-calendar</module> -->
    <!-- Comment for work -->
    <!-- 
    <module>royale-fullcalendar-yearview</module>
    <module>royale-jscalendar</module>
    <module>royale-inspire-tree</module>
    <module>royale-virtual-select</module>
    <module>royalecomponents</module>
    <module>royale-fullcalendar</module>-->
  </modules>

  <properties>
    <source.map>true</source.map>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputencoding>UTF-8</project.reporting.outputencoding>
    <maven.version>3.6.2</maven.version>

     <!-- Royale Library versions -->
    <royale.version>0.9.10-SNAPSHOT</royale.version>

    <royale.build-tools.version>1.0.0</royale.build-tools.version>

    <royale.compiler.version>${royale.version}</royale.compiler.version>
    <royale.typedefs.version>${royale.version}</royale.typedefs.version>
    <royale.framework.version>${royale.version}</royale.framework.version>

    <project.compiler.options>
        -js-default-initializers=true;
        -source-map=${source.map};
        -source-map-source-root=${project.basedir}/src/main/royale/;
        <!-- email Josh:
        With js-dynamic-access-unknown-members, the "dynamic-access" part of the name refers to how the JS is generated.
        It basically says that if you try to access a member that doesn't exist on a class, the generated JS should use
        brackets/string (obj["field"]) instead of a dot (obj.field) for member access.
        The idea is to force Closure compiler not to rename the name of the field on that particular line because Closure leaves strings as-is.
        setTheme() is not declared on the Object class, so the generated JS output for obj.setTheme() will be obj["setTheme"]() if js-dynamic-access-unknown-members is true.
        If js-dynamic-access-unknown-members is false, then it will remain as obj.setTheme() in the generated JS, which may or may not be renamed by Closure in the release build.
        (in some cases, Closure decides not to rename things, for whatever magical reasons it has... yes, even after months of wrangling Closure,
        I still don't completely understand everything that it does) -->
        -js-dynamic-access-unknown-members=true;
        <!-- -keep-as3-metadata+=Inject,Dispatcher,EventHandler,Event,PostConstruct,PreDestroy,ViewAdded,ViewRemoved,Bindable,Transient; -->
        <!-- -keep-as3-metadata+=Inject,Dispatcher,EventHandler,Event,Bindable,Transient; -->
        <!-- -keep-as3-metadata+=PostConstruct,PreDestroy,ViewAdded,ViewRemoved; -->
        -keep-as3-metadata+=Inject,Dispatcher,EventHandler,Event,PostConstruct,PreDestroy,ViewAdded,ViewRemoved,Bindable,Transient;
        -keep-code-with-metadata=Inject;
        -show-binding-warnings=false;
    </project.compiler.options>
  </properties>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.royale.compiler</groupId>
        <artifactId>royale-maven-plugin</artifactId>
        <version>${royale.compiler.version}</version>
      </plugin>
    </plugins>
  </build>

  <dependencies>
    <dependency>
      <groupId>org.apache.royale.framework</groupId>
      <artifactId>Core</artifactId>
      <version>${royale.framework.version}</version>
      <type>swc</type>
      <scope>provided</scope>
      <classifier>js</classifier>
    </dependency>

    <dependency>
      <groupId>org.apache.royale.framework</groupId>
      <artifactId>Language</artifactId>
      <version>${royale.framework.version}</version>
      <type>swc</type>
      <scope>provided</scope>
      <classifier>js</classifier>
    </dependency>

    <dependency>
      <groupId>org.apache.royale.framework</groupId>
      <artifactId>Binding</artifactId>
      <version>${royale.framework.version}</version>
      <type>swc</type>
      <scope>provided</scope>
      <classifier>js</classifier>
    </dependency>

    <dependency>
      <groupId>org.apache.royale.framework</groupId>
      <artifactId>Collections</artifactId>
      <version>${royale.framework.version}</version>
      <type>swc</type>
      <scope>provided</scope>
      <classifier>js</classifier>
    </dependency>

    <dependency>
      <groupId>org.apache.royale.framework</groupId>
      <artifactId>HTML</artifactId>
      <version>${royale.framework.version}</version>
      <type>swc</type>
      <scope>provided</scope>
      <classifier>js</classifier>
    </dependency>

    <dependency>
      <groupId>org.apache.royale.framework</groupId>
      <artifactId>Icons</artifactId>
      <version>${royale.framework.version}</version>
      <type>swc</type>
      <scope>provided</scope>
      <classifier>js</classifier>
    </dependency>

    <dependency>
      <groupId>org.apache.royale.framework</groupId>
      <artifactId>Network</artifactId>
      <version>${royale.framework.version}</version>
      <type>swc</type>
      <scope>provided</scope>
      <classifier>js</classifier>
    </dependency>

    <dependency>
      <groupId>org.apache.royale.framework</groupId>
      <artifactId>Reflection</artifactId>
      <version>${royale.framework.version}</version>
      <type>swc</type>
      <scope>provided</scope>
      <classifier>js</classifier>
    </dependency>

    <dependency>
      <groupId>org.apache.royale.framework</groupId>
      <artifactId>MXRoyaleBase</artifactId>
      <version>${royale.framework.version}</version>
      <type>swc</type>
      <scope>provided</scope>
      <classifier>js</classifier>
    </dependency>

    <dependency>
      <groupId>org.apache.royale.framework</groupId>
      <artifactId>Jewel</artifactId>
      <version>${royale.framework.version}</version>
      <type>swc</type>
      <scope>provided</scope>
      <classifier>js</classifier>
    </dependency>

    <dependency>
      <groupId>org.apache.royale.framework</groupId>
      <artifactId>Crux</artifactId>
      <version>${royale.framework.version}</version>
      <type>swc</type>
      <scope>provided</scope>
      <classifier>js</classifier>
    </dependency>

  </dependencies>

</project>
